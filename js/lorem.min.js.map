{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ts/lorem.ts","ts/random.ts","ts/types.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","random","types_1","_TEXT","_gen_pool","dupe","pool","push","apply","shuffle","InfiniteIterator","_gen_word","func","args","text","next","value","undefined","__spreadArrays","_gen_sentence","comma","word_range","capitalize","randint","choice","_gen_paragraph","sentence_range","word","count","list","sentence","paragraph","get_word","sep","iter_list","join","get_sentence","get_paragraph","set_pool","x","temp","j","Math","floor","b","seq","String","prototype","s","charAt","toUpperCase","slice","this","pointer","items","done","Symbol","iterator"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,GCEA,qRAEA,IAAAK,EAAAX,EAAA,YACAY,EAAAZ,EAAA,WAGIa,EAAkB,CAClB,KAAM,aAAc,SAAU,UAAW,OAAQ,OAAQ,OAAQ,SAAU,UAC3E,cAAe,YAAa,QAAS,YAAa,WAAY,KAAM,QAAS,SAC7E,OAAQ,KAAM,UAAW,OAAQ,OAAQ,OAAQ,MAAO,KAAM,KAAM,KAAM,YAC1E,eAAgB,SAAU,KAAM,KAAM,aAAc,QAAS,QAAS,SAAU,UAChF,UAAW,QAAS,QAAS,QAAS,SAAU,OAAQ,MAAO,UAAW,QAC1E,WAAY,UAAW,WAAY,WAAY,MAAO,OAAQ,gBAAiB,MAC/E,OAAQ,MAAO,OAAQ,SAAU,UAAW,KAAM,QAAS,SAAU,aAGzE,SAASC,EAAUC,QAAA,IAAAA,IAAAA,EAAA,GAGf,IAFA,IAAIC,EAAiB,GAEZnB,EAAI,EAAGA,EAAIkB,EAAMlB,IACtBmB,EAAKC,KAAIC,MAATF,EAAaH,GAIjB,OAFAF,EAAOQ,QAAQH,GAER,IAAIJ,EAAAQ,iBAAiBJ,GAGhC,SAASK,EACLL,EACAM,EACAC,QAAA,IAAAA,IAAAA,EAAA,IAEA,IAAIC,EAAOR,EAAKS,OAAOC,MAMvB,YALaC,IAATL,IAEIE,EADgB,iBAATF,EACAE,EAAKF,GAAKJ,MAAVM,EAAcD,GAEdD,EAAIJ,WAAA,EAAAU,EAAA,CAACJ,GAASD,KACtBC,EAGX,SAASK,EACLb,EACAc,EACAC,GAGA,IADA,IAAIP,EAAOH,EAAUL,EAAMgB,YAClBnC,EAAI,EAAGA,EAAIc,EAAOsB,QAAOf,MAAdP,EAAkBoB,GAAc,EAAGlC,IACnD2B,GAAQ,IAAMH,EAAUL,GAG5B,IAASnB,EAAI,EAAGA,EAAIc,EAAOsB,QAAOf,MAAdP,EAAkBmB,IAClBnB,EAAOuB,OAAO,EAAC,GAAM,IADKrC,IAAK,CAG3C2B,GAAQ,IACR,IAAS3B,EAAI,EAAGA,EAAIc,EAAOsB,QAAOf,MAAdP,EAAkBoB,GAAc,EAAGlC,IACnD2B,GAAQ,IAAMH,EAAUL,GAKpC,OAAOQ,EAAO,IAGlB,SAASW,EACLnB,EACAc,EACAC,EACAK,GAGA,IADA,IAAIZ,EAAOK,EAAcb,EAAMc,EAAOC,GAC7BlC,EAAI,EAAGA,EAAIc,EAAOsB,QAAOf,MAAdP,EAAkByB,GAAkB,EAAGvC,IACvD2B,GAAQ,IAAMK,EAAcb,EAAMc,EAAOC,GAC7C,OAAOP,EAGX,SAAgBa,EACZC,EACAhB,EACAC,QAFA,IAAAe,IAAAA,EAAA,QAEA,IAAAf,IAAAA,EAAA,IAKA,IAHA,IAAIP,EAAOF,EAAUwB,GACjBC,EAAiB,GAEZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAKI,EAAUL,EAAMM,EAAMC,IACpC,OAAO,IAAIX,EAAAQ,iBAAiBmB,GAGhC,SAAgBC,EACZF,EACAR,EACAC,QAFA,IAAAO,IAAAA,EAAA,QACA,IAAAR,IAAAA,EAAA,CAA2B,EAAG,SAC9B,IAAAC,IAAAA,EAAA,CAAgC,EAAG,IAKnC,IAHA,IAAIf,EAAOF,EAAUwB,GACjBC,EAAiB,GAEZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAKY,EAAcb,EAAMc,EAAOC,IACzC,OAAO,IAAInB,EAAAQ,iBAAiBmB,GAGhC,SAAgBE,EACZH,EACAR,EACAC,EACAK,QAHA,IAAAE,IAAAA,EAAA,QACA,IAAAR,IAAAA,EAAA,CAA2B,EAAG,SAC9B,IAAAC,IAAAA,EAAA,CAAgC,EAAG,SACnC,IAAAK,IAAAA,EAAA,CAAoC,EAAG,KAKvC,IAHA,IAAIpB,EAAOF,EAAUwB,GACjBC,EAAiB,GAEZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAKkB,EAAenB,EAAMc,EAAOC,EAAYK,IACtD,OAAO,IAAIxB,EAAAQ,iBAAiBmB,GArChCjC,EAAA+B,KAAAA,EAaA/B,EAAAkC,SAAAA,EAaAlC,EAAAmC,UAAAA,EAcAnC,EAAAoC,SAAA,SACIJ,EACAK,EACArB,EACAC,QAHA,IAAAe,IAAAA,EAAA,QACA,IAAAK,IAAAA,EAAA,UAEA,IAAApB,IAAAA,EAAA,IAEqB,iBAAVe,IACPA,EAAQ3B,EAAOsB,QAAOf,MAAdP,EAAkB2B,IAI9B,IAHA,IAAIM,EAAYP,EAAKC,EAAOhB,EAAMC,GAE9BgB,EAAiB,GACZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAK2B,EAAUnB,OAAOC,OAC/B,OAAOa,EAAKM,KAAKF,IAGrBrC,EAAAwC,aAAA,SACIR,EACAK,EACAb,EACAC,QAHA,IAAAO,IAAAA,EAAA,QACA,IAAAK,IAAAA,EAAA,UACA,IAAAb,IAAAA,EAAA,CAAsB,EAAG,SACzB,IAAAC,IAAAA,EAAA,CAA2B,EAAG,IAET,iBAAVO,IACPA,EAAQ3B,EAAOsB,QAAOf,MAAdP,EAAkB2B,IAI9B,IAHA,IAAIM,EAAYJ,EAASF,EAAOR,EAAOC,GAEnCQ,EAAiB,GACZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAK2B,EAAUnB,OAAOC,OAC/B,OAAOa,EAAKM,KAAKF,IAGrBrC,EAAAyC,cAAA,SACIT,EACAK,EACAb,EACAC,EACAK,QAJA,IAAAE,IAAAA,EAAA,QACA,IAAAK,IAAAA,EAAA,UACA,IAAAb,IAAAA,EAAA,CAAsB,EAAG,SACzB,IAAAC,IAAAA,EAAA,CAA2B,EAAG,SAC9B,IAAAK,IAAAA,EAAA,CAA+B,EAAG,KAEb,iBAAVE,IACPA,EAAQ3B,EAAOsB,QAAOf,MAAdP,EAAkB2B,IAI9B,IAHA,IAAIM,EAAYH,EAAUH,EAAOR,EAAOC,EAAYK,GAEhDG,EAAiB,GACZ1C,EAAI,EAAGA,EAAIyC,EAAOzC,IACvB0C,EAAKtB,KAAK2B,EAAUnB,OAAOC,OAC/B,OAAOa,EAAKM,KAAKF,IAGrBrC,EAAA0C,SAAA,SAAyBhC,GACrBH,EAAQG,mDCtKZ,8DAEAV,EAAAa,QAAA,SAA2B8B,GAIvB,IAHA,IAAIC,EAEAC,EACKtD,EAAIoD,EAAEzC,OAAS,EAAO,EAAJX,EAAOA,IAC9BsD,EAAIC,KAAKC,MAAOD,KAAKzC,UAAYd,EAAI,IAErCqD,EAAOD,EAAEpD,GACToD,EAAEpD,GAAKoD,EAAEE,GACTF,EAAEE,GAAKD,GAIf5C,EAAA2B,QAAA,SAAwB/B,EAAWoD,GAC/B,OAAOF,KAAKC,MAAMD,KAAKzC,UAAY2C,EAAIpD,IAAMA,GAGjDI,EAAA4B,OAAA,SAA0BqB,GAEtB,OAAOA,EADCH,KAAKC,MAAOD,KAAKzC,SAAW4C,EAAI/C,kCCpB5C,8DAEA,IAAAG,EAAAX,EAAA,YAMAwD,OAAOC,UAAUzB,WAAa,WAC1B,OALJ,SAAoB0B,GAChB,OAAOA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GAIpC7B,CAAW8B,OAGtB,IAAA1C,GAQWA,EAAAqC,UAAAhC,KAAP,WAMI,OALIqC,KAAKC,SAAWD,KAAKtD,SACrBsD,KAAKC,QAAU,EACfpD,EAAOQ,QAAQ2C,KAAKE,QAGjB,CACHC,MAAM,EACNvC,MAAOoC,KAAKE,MAAMF,KAAKC,aAI/B3C,EAAAqC,UAACS,OAAOC,UAAR,WACI,OAAOL,MAEf1C,GAnBI,SAAAA,EAAmB4C,GAAAF,KAAAE,MAAAA,EAHXF,KAAAC,QAAU,EAIdD,KAAKtD,OAASwD,EAAMxD,OALfF,EAAAc,iBAAAA","file":"lorem.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/// <reference path=\"./index.d.ts\" />\n\n'use strict';\n\nimport * as random from './random';\nimport { InfiniteIterator } from \"./types\";\n\n// original lorem ipsum text pool\nlet _TEXT: string[] = [\n    'ad', 'adipiscing', 'aliqua', 'aliquip', 'amet', 'anim', 'aute', 'cillum', 'commodo',\n    'consectetur', 'consequat', 'culpa', 'cupidatat', 'deserunt', 'do', 'dolor', 'dolore',\n    'duis', 'ea', 'eiusmod', 'elit', 'enim', 'esse', 'est', 'et', 'eu', 'ex', 'excepteur',\n    'exercitation', 'fugiat', 'id', 'in', 'incididunt', 'ipsum', 'irure', 'labore', 'laboris',\n    'laborum', 'lorem', 'magna', 'minim', 'mollit', 'nisi', 'non', 'nostrud', 'nulla',\n    'occaecat', 'officia', 'pariatur', 'proident', 'qui', 'quis', 'reprehenderit', 'sed',\n    'sint', 'sit', 'sunt', 'tempor', 'ullamco', 'ut', 'velit', 'veniam', 'voluptate'\n]\n\nfunction _gen_pool(dupe: number = 1) {\n    var pool: string[] = [];\n\n    for (var i = 0; i < dupe; i++) {\n        pool.push(..._TEXT);\n    }\n    random.shuffle(pool);\n\n    return new InfiniteIterator(pool);\n}\n\nfunction _gen_word(\n    pool: StringIterator,\n    func?: string | StringFunction,\n    args: any[] = []\n) {\n    var text = pool.next().value;\n    if (func !== undefined)\n        if (typeof func === \"string\")\n            text = text[func](...args);\n        else\n            text = func(text, ...args);\n    return text;\n}\n\nfunction _gen_sentence(\n    pool: StringIterator,\n    comma: [number, number],\n    word_range: [number, number]\n) {\n    var text = _gen_word(pool, capitalize);\n    for (var i = 0; i < random.randint(...word_range) - 1; i++)\n        text += ' ' + _gen_word(pool);\n\n    var include_comma: boolean;\n    for (var i = 0; i < random.randint(...comma); i++) {\n        include_comma = random.choice([true, false]);\n        if (include_comma) {\n            text += ','\n            for (var i = 0; i < random.randint(...word_range) - 1; i++)\n                text += ' ' + _gen_word(pool);\n            continue\n        }\n        break\n    }\n    return text + '.';\n}\n\nfunction _gen_paragraph(\n    pool: StringIterator,\n    comma: [number, number],\n    word_range: [number, number],\n    sentence_range: [number, number]\n) {\n    var text = _gen_sentence(pool, comma, word_range);\n    for (var i = 0; i < random.randint(...sentence_range) - 1; i++)\n        text += ' ' + _gen_sentence(pool, comma, word_range);\n    return text;\n}\n\nexport function word(\n    count: number = 1,\n    func?: string | StringFunction,\n    args: any[] = []\n) {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_word(pool, func, args));\n    return new InfiniteIterator(list);\n}\n\nexport function sentence(\n    count: number = 1,\n    comma: [number, number] = [0, 2],\n    word_range: [number, number] = [4, 8]\n) {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_sentence(pool, comma, word_range));\n    return new InfiniteIterator(list);\n}\n\nexport function paragraph(\n    count: number = 1,\n    comma: [number, number] = [0, 2],\n    word_range: [number, number] = [4, 8],\n    sentence_range: [number, number] = [5, 10]\n) {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_paragraph(pool, comma, word_range, sentence_range));\n    return new InfiniteIterator(list);\n}\n\nexport function get_word(\n    count: number | [number, number] = 1,\n    sep: string = ' ',\n    func?: string | StringFunction,\n    args: any[] = []\n) {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = word(count, func, args);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\nexport function get_sentence(\n    count: number | NumberTuple = 1,\n    sep: string = ' ',\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n) {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = sentence(count, comma, word_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\nexport function get_paragraph(\n    count: number | NumberTuple = 1,\n    sep: string = ' ',\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n) {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = paragraph(count, comma, word_range, sentence_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\nexport function set_pool(pool: string[]) {\n    _TEXT = pool;\n}\n","/// <reference path=\"./index.d.ts\" />\n\n'use strict';\n\nexport function shuffle<T>(x: T[]) {\n    var temp: any;\n\n    var j: number;\n    for (var i = x.length - 1; i > 0; i--) {\n        j = Math.floor((Math.random() * (i + 1)));\n\n        temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n}\n\nexport function randint(a: number, b: number) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\nexport function choice<T>(seq: T[]) {\n    var i = Math.floor((Math.random() * seq.length));\n    return seq[i];\n}\n","/// <reference path=\"./index.d.ts\" />\n\n'use strict';\n\nimport * as random from \"./random\";\n\nfunction capitalize(s: string): string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nString.prototype.capitalize = function () {\n    return capitalize(this);\n};\n\nexport class InfiniteIterator<T> implements Iterator<T> {\n    private pointer = 0;\n    private length: number;\n\n    constructor(public items: T[]) {\n        this.length = items.length;\n    }\n\n    public next(): IteratorResult<T> {\n        if (this.pointer >= this.length) {\n            this.pointer = 0;\n            random.shuffle(this.items);\n        }\n\n        return {\n            done: false,\n            value: this.items[this.pointer++]\n        };\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return this;\n    }\n}\n"]}