{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/os-browserify/browser.js","ts/lorem.ts","ts/random.ts","ts/types.ts"],"names":[],"mappings":"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","file":"lorem.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","/// <reference path=\"../ts/lorem.d.ts\" />\n\n/**\n * Lorem ipsum generator.\n *\n * In publishing and graphic design, lorem ipsum is a placeholder text commonly\n * used to demonstrate the visual form of a document or a typeface without\n * relying on meaningful content.\n *\n * The `lorem` module provides a generic access to generating the lorem ipsum text\n * from its very original text:\n *\n *     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n *     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n *     veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n *     commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit\n *     esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n *     cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n *     est laborum.\n *\n * Usage of the `lorem` module is rather simple. Depending on your needs, the\n * `lorem` module provides generation of **word**s, **sentence**s, and\n * **paragraph**s.\n *\n * Get Random Words\n * ----------------\n *\n * The `lorem` module provides two different ways for getting random words.\n *\n * 1. `word` -- generate a list of random words\n *\n *    ```javascript\n *    function word<T extends string | StringFunction>(\n *        count?: number | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): InfiniteIterator<string>\n *    ```\n *\n * 2. `get_word` -- return random words\n *\n *    ```javascript\n *    function get_word<K extends number | [number, number],\n *                      T extends string | StringFunction>(\n *        count?: (K extends number ? number : [number, number]) | undefined,\n *        sep?: string | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): string\n *    ```\n *\n * Get Random Sentences\n * --------------------\n *\n * The `lorem` module provides two different ways for getting random sentences.\n *\n * 1. `sentence` -- generate a list of random sentences\n *\n *    ```javascript\n *    function sentence(\n *        count?: number | undefined,\n *        comma?: [number, number] | undefined,\n *        word_range?: [number, number] | undefined\n *    ): InfiniteIterator<string>\n *    ```\n *\n * 2. `get_sentence` -- return random sentences\n *\n *    ```javascript\n *    function get_sentence<K extends number | [number, number]>(\n *        count?: (K extends number ? number : [number, number]) | undefined,\n *        sep?: string | undefined,\n *        comma?: [number, number] | undefined,\n *        word_range?: [number, number] | undefined\n *    ): string\n *    ```\n *\n * Get Random Paragraphs\n * ---------------------\n *\n * The `lorem` module provides two different ways for getting random paragraphs.\n *\n * 1. `paragraph` -- generate a list of random paragraphs\n *\n *    ```javascript\n *    function paragraph(\n *        count?: number | undefined,\n *        comma?: [number, number] | undefined,\n *        word_range?: [number, number] | undefined,\n *        sentence_range?: [number, number] | undefined\n *    ): InfiniteIterator<string>\n *    ```\n *\n * 2. `get_paragraph` -- return random paragraphs\n *\n *    ```javascript\n *    function get_paragraph<K extends number | [number, number]>(\n *        count?: (K extends number ? number : [number, number]) | undefined,\n *        sep?: string | undefined,\n *        comma?: [number, number] | undefined,\n *        word_range?: [number, number] | undefined,\n *        sentence_range?: [...] | undefined\n *    ): string\n *    ```\n *\n * Customise Word Pool\n * -------------------\n *\n * If wanted, the `lorem` module also provides an interface to customise the word\n * pool as you wish.\n *\n * 1. `set_pool` -- customise random word pool\n *\n *    ```javascript\n *    function set_pool(pool: string[]): void\n *    ```\n *\n * @module lorem\n */\n\n'use strict';\n\nimport { EOL } from 'os';\nimport * as random from './random';\nimport { InfiniteIterator } from \"./types\";\n\n/** Original lorem ipsum text pool. */\nlet _TEXT: string[] = [\n    'ad', 'adipiscing', 'aliqua', 'aliquip', 'amet', 'anim', 'aute', 'cillum', 'commodo',\n    'consectetur', 'consequat', 'culpa', 'cupidatat', 'deserunt', 'do', 'dolor', 'dolore',\n    'duis', 'ea', 'eiusmod', 'elit', 'enim', 'esse', 'est', 'et', 'eu', 'ex', 'excepteur',\n    'exercitation', 'fugiat', 'id', 'in', 'incididunt', 'ipsum', 'irure', 'labore', 'laboris',\n    'laborum', 'lorem', 'magna', 'minim', 'mollit', 'nisi', 'non', 'nostrud', 'nulla',\n    'occaecat', 'officia', 'pariatur', 'proident', 'qui', 'quis', 'reprehenderit', 'sed',\n    'sint', 'sit', 'sunt', 'tempor', 'ullamco', 'ut', 'velit', 'veniam', 'voluptate'\n]\n\n/**\n * Generate word pool.\n *\n * - Args:\n *\n *   * `dupe` -- `number`\n *\n *     Duplication to generate the word pool.\n *\n *     *default*: `1`\n *\n * - Returns\n *\n *   * `StringIterator` -- an infinite loop word pool\n *\n * @param {number} [dupe]\n * @returns {StringIterator}\n */\nfunction _gen_pool(dupe: number = 1): StringIterator {\n    var pool: string[] = [];\n\n    for (var i = 0; i < dupe; i++) {\n        pool.push(..._TEXT);\n    }\n    random.shuffle(pool);\n\n    return new InfiniteIterator(pool);\n}\n\n/**\n * Generate random word.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `func` -- `T extends string ? string : StringFunction`\n *\n *     Filter function. It can be an attribute name of `String`, or a customised\n *     function that takes the original `String` and returns the modified `String`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random word\n *\n * @template T\n * @param {StringIterator} pool\n * @param {T extends string ? string : StringFunction} [func]\n * @param {any[]} [args]\n * @returns {string}\n */\nfunction _gen_word(\n    pool: StringIterator,\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    var text = pool.next().value;\n    if (func !== undefined)\n        if (typeof func === \"string\")\n            text = text[func](...args);\n        else\n            text = func(text, ...args);\n    return text;\n}\n\n/**\n * Generate random sentence.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentence\n *\n * @param {StringIterator} pool\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @returns {string}\n */\nfunction _gen_sentence(\n    pool: StringIterator,\n    comma: [number, number],\n    word_range: [number, number]\n): string {\n    var text = _gen_word(pool, 'capitalize');\n    for (var i = 0; i < random.randint(...word_range) - 1; i++)\n        text += ' ' + _gen_word(pool);\n\n    var include_comma: boolean;\n    for (var i = 0; i < random.randint(...comma); i++) {\n        include_comma = random.choice([true, false]);\n        if (include_comma) {\n            text += ','\n            for (var i = 0; i < random.randint(...word_range) - 1; i++)\n                text += ' ' + _gen_word(pool);\n            continue\n        }\n        break\n    }\n    return text + '.';\n}\n\n/**\n * Generate random paragraph.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `[number, number]`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 1])`\n *\n * - Returns:\n *\n *   * `str` -- random paragraph\n *\n * @param {StringIterator} pool\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @param {NumberTuple} sentence_range\n * @returns {string}\n */\nfunction _gen_paragraph(\n    pool: StringIterator,\n    comma: [number, number],\n    word_range: [number, number],\n    sentence_range: [number, number]\n): string {\n    var text = _gen_sentence(pool, comma, word_range);\n    for (var i = 0; i < random.randint(...sentence_range) - 1; i++)\n        text += ' ' + _gen_sentence(pool, comma, word_range);\n    return text;\n}\n\n/**\n * Generate a list of random words.\n *\n * ```javascript\n * > word(3)\n * InfiniteIterator {\n *   items: [ 'dolore', 'esse', 'duis' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, 'capitalize')\n * InfiniteIterator {\n *   items: [ 'Ullamco', 'Adipiscing', 'Consectetur' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, (s) => s.toUpperCase())\n * InfiniteIterator {\n *   items: [ 'QUIS', 'ALIQUA', 'CILLUM' ],\n *   pointer: 0,\n *   length: 3\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random words.\n *\n *     *default*: `1`\n *\n *   * `func` -- `Optional[Union[str, Callable[[str], str]]]`\n *\n *     Filter function. It can be an attribute name of `str`, or a customised\n *     function that takes the original `str` and returns the modified `str`.\n *\n *     *default*: `None`\n *\n *   * `args` -- `Tuple[str]`\n *\n *     Additional positional arguments for `func`.\n *\n *     *default*: `()`\n *\n *   * `kwargs` -- `Dict[str, Any]`\n *\n *     Additional keyword arguments for `func`.\n *\n *     *default*: `{}`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random words generator\n *\n * @template T\n * @param {number} [count]\n * @param {T extends string ? string : StringFunction} [func]\n * @param {any[]} [args]\n * @returns {StringIterator}\n */\nexport function word(\n    count: number = 1,\n    func?: string | StringFunction,\n    args: any[] = []\n): StringIterator {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_word(pool, func, args));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random sentences.\n *\n * ```javascript\n * > sentence()\n * InfiniteIterator {\n *   items: [ 'Anim quis id et adipiscing nulla.' ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random sentences.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random sentence generator\n *\n * @param {number} [count]\n * @param {NumberTuple} [comma]\n * @param {NumberTuple} [word_range]\n * @returns {StringIterator}\n */\nexport function sentence(\n    count: number = 1,\n    comma: [number, number] = [0, 2],\n    word_range: [number, number] = [4, 8]\n): StringIterator {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_sentence(pool, comma, word_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random paragraphs.\n *\n * ```javascript\n * > paragraph()\n * InfiniteIterator {\n *   items: [\n *     'Tempor minim mollit deserunt do. Eu exercitation et reprehenderit, veniam ad proident. Quis lorem cupidatat sit fugiat. Sed cillum pariatur aute irure magna ea. Commodo voluptate ullamco sint aliqua in, consequat qui officia esse duis.'\n *   ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `int`\n *\n *     Number of non-repeated random paragraphs.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `[number, number]`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- random paragraph generator\n *\n * @param {number} [count]\n * @param {NumberTuple} [comma]\n * @param {NumberTuple} [word_range]\n * @param {NumberTuple} [sentence_range]\n * @returns {StringIterator}\n */\nexport function paragraph(\n    count: number = 1,\n    comma: [number, number] = [0, 2],\n    word_range: [number, number] = [4, 8],\n    sentence_range: [number, number] = [5, 10]\n): StringIterator {\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_paragraph(pool, comma, word_range, sentence_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Return random words.\n *\n * ```javascript\n * > lorem.get_word(3)\n * 'veniam minim sit'\n * > lorem.get_word(3, ' ', 'capitalize')\n * 'In Nulla Enim'\n * > lorem.get_word(3, '-', (s) => s.toUpperCase())\n * 'OCCAECAT-DOLOR-SINT'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | [number, number]`\n *\n *     Number of random words. To generate random number of words, supply a\n *     2-element tuple of `number`, the function will use `random.randint` to choose\n *     a random integer as the number of random words.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each word.\n *\n *     *default*: `' '`\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be a function name of `string`, or a customised\n *     function that takes the original `string` and returns the modified `string`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random words\n *\n * @template K\n * @template T\n * @param {K extends number ? number : NumberTuple} [count]\n * @param {string} [sep]\n * @param {T extends string ? string : StringFunction} [func]\n * @param {any[]} [args]\n * @returns {string}\n */\nexport function get_word(\n    count: number | [number, number] = 1,\n    sep: string = ' ',\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = word(count, func, args);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random sentences.\n *\n * ```javascript\n * > get_sentence()\n * 'Irure adipiscing reprehenderit cupidatat sint.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | [number, number]`\n *\n *     Number of random sentences. To generate random number of sentences,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     sentences.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each sentence.\n *\n *     *default*: `' '`\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentences\n *\n * @template K\n * @param {K extends number ? number : NumberTuple} [count]\n * @param {string} [sep]\n * @param {NumberTuple} [comma]\n * @param {NumberTuple} [word_range]\n * @returns {string}\n */\nexport function get_sentence(\n    count: number | NumberTuple = 1,\n    sep: string = ' ',\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n): string {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = sentence(count, comma, word_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random paragraphs.\n *\n * ```javascript\n * > get_paragraph()\n * 'Est ut nisi consequat reprehenderit elit. Aliquip sed sint excepteur sunt. Cupidatat officia labore lorem ullamco. Minim aute proident quis laborum esse anim, in sit incididunt. Aliqua culpa dolor magna, qui ex eu laboris et. Do id ea cillum veniam. Velit exercitation dolore voluptate tempor.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | [number, number]`\n *\n *     Number of random paragraphs. To generate random number of paragraphs,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     paragraphs.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each paragraph.\n *\n *     *default*: `os.EOL` (`\\r\\n` on Windows, `\\n` on POSIX)\n *\n *   * `comma` -- `[number, number]`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `[number, number]`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `[number, number]`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `string` -- random paragraphs\n *\n * @template K\n * @param {K extends number ? number : NumberTuple} [count]\n * @param {string} [sep]\n * @param {NumberTuple} [comma]\n * @param {NumberTuple} [word_range]\n * @param {NumberTuple} [sentence_range]\n * @returns {string}\n */\nexport function get_paragraph(\n    count: number | NumberTuple = 1,\n    sep: string = EOL,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n): string {\n    if (typeof count === \"object\")\n        count = random.randint(...count);\n    var iter_list = paragraph(count, comma, word_range, sentence_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Customise random word pool.\n *\n * - Args:\n *\n *   * `pool` -- `string[]`\n *\n *     List of words to be used as random word pool.\n *\n * @param {string[]} pool\n */\nexport function set_pool(pool: string[]) {\n    _TEXT = pool;\n}\n","/// <reference path=\"../ts/random.d.ts\" />\n\n/**\n * JavaScript port of some useful functions from Python's\n * builtin `random` module.\n *\n * @module random\n * @see module:lorem\n */\n\n'use strict';\n\n/**\n * Shuffle list x in place, and return None.\n *\n * @template T\n * @param {T[]} x\n */\nexport function shuffle<T>(x: T[]) {\n    var temp: any;\n\n    var j: number;\n    for (var i = x.length - 1; i > 0; i--) {\n        j = Math.floor((Math.random() * (i + 1)));\n\n        temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n}\n\n/**\n * Return random integer in range [a, b], including both end points.\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport function randint(a: number, b: number) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\n/**\n * Choose a random element from a non-empty sequence.\n *\n * @template T\n * @param {T[]} seq\n * @returns {T}\n */\nexport function choice<T>(seq: T[]) {\n    var i = Math.floor((Math.random() * seq.length));\n    return seq[i];\n}\n","/// <reference path=\"../ts/types.d.ts\" />\n\n/**\n * Customised utility types.\n *\n * @module types\n * @see module:lorem\n */\n\n'use strict';\n\nimport * as random from \"./random\";\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @param {string} s\n * @returns {string}\n */\nfunction capitalize(s: string): string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @returns {string}\n * @memberof String\n */\nString.prototype.capitalize = function () {\n    return capitalize(this.toString());\n};\n\n/**\n * Infinite iterator.\n *\n * @class InfiniteIterator\n * @implements {Iterator<T>}\n * @template T\n */\nexport class InfiniteIterator<T> implements Iterator<T> {\n    private pointer = 0;\n    private length: number;\n\n    /**\n     * Creates an instance of `InfiniteIterator`.\n     *\n     * @param {T[]} items\n     * @memberof InfiniteIterator\n     */\n    constructor(public items: T[]) {\n        this.length = items.length;\n    }\n\n    public next(): IteratorResult<T> {\n        if (this.pointer >= this.length) {\n            this.pointer = 0;\n            random.shuffle(this.items);\n        }\n\n        return {\n            done: false,\n            value: this.items[this.pointer++]\n        };\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return this;\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}