{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/os-browserify/browser.js","ts/lorem.ts","ts/random.ts","ts/types.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","endianness","hostname","location","loadavg","uptime","freemem","Number","MAX_VALUE","totalmem","cpus","type","release","navigator","appVersion","networkInterfaces","getNetworkInterfaces","arch","platform","tmpdir","tmpDir","EOL","homedir","os_1","random","types_1","_TEXT","_gen_pool","dupe","pool","push","apply","shuffle","InfiniteIterator","_gen_word","func_args","func","args","undefined","text","next","value","__spreadArrays","_gen_sentence","comma","word_range","randint","choice","_gen_paragraph","sentence_range","word","count","list","sentence","paragraph","get_word","sep","iter_list","join","get_sentence","get_paragraph","set_pool","x","temp","j","Math","floor","b","seq","String","prototype","capitalize","s","charAt","toUpperCase","slice","this","toString","pointer","_length","_shuffle","_elements","done","Symbol","iterator","elements"],"mappings":"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","file":"lorem.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","/// <reference path=\"../ts/lorem.d.ts\" />\n\n/**\n * Lorem ipsum generator.\n *\n * In publishing and graphic design, lorem ipsum is a placeholder text commonly\n * used to demonstrate the visual form of a document or a typeface without\n * relying on meaningful content.\n *\n * The `lorem` module provides a generic access to generating the lorem ipsum text\n * from its very original text:\n *\n *     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n *     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n *     veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n *     commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit\n *     esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n *     cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n *     est laborum.\n *\n * Usage of the `lorem` module is rather simple. Depending on your needs, the\n * `lorem` module provides generation of **word**s, **sentence**s, and\n * **paragraph**s.\n *\n * Get Random Words\n * ----------------\n *\n * The `lorem` module provides two different ways for getting random words.\n *\n * 1. `word` -- generate a list of random words\n *\n *    ```typescript\n *    function word<T extends string | StringFunction>(\n *        count?: number | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): InfiniteIterator<string>;\n *    function word<T extends string | StringFunction>({ count, func, args }: {\n *        count?: number | undefined;\n *        func?: (T extends string ? string : StringFunction) | undefined;\n *        args?: any[] | undefined;\n *    }): InfiniteIterator<string>;\n *    ```\n *\n * 2. `get_word` -- return random words\n *\n *    ```typescript\n *    function get_word<K extends number | NumberTuple,\n *                      T extends string | StringFunction>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): string;\n *    function get_word<K extends number | [number, number], T extends string | StringFunction>({ count, sep, func, args }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        func?: (T extends string ? string : StringFunction) | undefined;\n *        args?: any[] | undefined;\n *    }): string;\n *    ```\n *\n * Get Random Sentences\n * --------------------\n *\n * The `lorem` module provides two different ways for getting random sentences.\n *\n * 1. `sentence` -- generate a list of random sentences\n *\n *    ```typescript\n *    function sentence(\n *        count?: number | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined\n *    ): InfiniteIterator<string>;\n *    function sentence({ count, comma, word_range }: {\n *        count?: number | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [number, number] | undefined;\n *    }): InfiniteIterator<string>\n *    ```\n *\n * 2. `get_sentence` -- return random sentences\n *\n *    ```typescript\n *    function get_sentence<K extends number | NumberTuple>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined\n *    ): string;\n *    function get_sentence<K extends number | [number, number]>({ count, sep, comma, word_range }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [...] | undefined;\n *    }): string;\n *    ```\n *\n * Get Random Paragraphs\n * ---------------------\n *\n * The `lorem` module provides two different ways for getting random paragraphs.\n *\n * 1. `paragraph` -- generate a list of random paragraphs\n *\n *    ```typescript\n *    function paragraph(\n *        count?: number | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined,\n *        sentence_range?: NumberTuple | undefined\n *    ): InfiniteIterator<string>;\n *    function paragraph({ count, comma, word_range, sentence_range }: {\n *        count?: number | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [number, number] | undefined;\n *        sentence_range?: [number, number] | undefined;\n *    }): InfiniteIterator<string>;\n *    ```\n *\n * 2. `get_paragraph` -- return random paragraphs\n *\n *    ```typescript\n *    function get_paragraph<K extends number | NumberTuple>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined,\n *        sentence_range?: [...] | undefined\n *    ): string;\n *    function get_paragraph<K extends number | [number, number]>({ count, sep, comma, word_range, sentence_range }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [...] | undefined;\n *        sentence_range?: [...] | undefined;\n *    }): string;\n *    ```\n *\n * Customise Word Pool\n * -------------------\n *\n * If wanted, the `lorem` module also provides an interface to customise the word\n * pool as you wish.\n *\n * 1. `set_pool` -- customise random word pool\n *\n *    ```javascript\n *    function set_pool(pool: string[]): void\n *    ```\n *\n * @module lorem\n */\n\n'use strict';\n\nimport { EOL } from 'os';\nimport * as random from './random';\nimport { InfiniteIterator } from \"./types\";\n\n/** Original lorem ipsum text pool. */\nlet _TEXT: string[] = [\n    'ad', 'adipiscing', 'aliqua', 'aliquip', 'amet', 'anim', 'aute', 'cillum', 'commodo',\n    'consectetur', 'consequat', 'culpa', 'cupidatat', 'deserunt', 'do', 'dolor', 'dolore',\n    'duis', 'ea', 'eiusmod', 'elit', 'enim', 'esse', 'est', 'et', 'eu', 'ex', 'excepteur',\n    'exercitation', 'fugiat', 'id', 'in', 'incididunt', 'ipsum', 'irure', 'labore', 'laboris',\n    'laborum', 'lorem', 'magna', 'minim', 'mollit', 'nisi', 'non', 'nostrud', 'nulla',\n    'occaecat', 'officia', 'pariatur', 'proident', 'qui', 'quis', 'reprehenderit', 'sed',\n    'sint', 'sit', 'sunt', 'tempor', 'ullamco', 'ut', 'velit', 'veniam', 'voluptate'\n]\n\n/**\n * Generate word pool.\n *\n * - Args:\n *\n *   * `dupe` -- `number`\n *\n *     Duplication to generate the word pool.\n *\n *     *default*: `1`\n *\n * - Returns\n *\n *   * `StringIterator` -- an infinite loop word pool\n *\n * @param {number} [dupe=1]\n * @returns {StringIterator}\n */\nfunction _gen_pool(dupe: number = 1): StringIterator {\n    var pool: string[] = [];\n\n    for (var i = 0; i < dupe; i++) {\n        pool.push(..._TEXT);\n    }\n    random.shuffle(pool);\n\n    return new InfiniteIterator(pool, true);\n}\n\n/**\n * Generate random word.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be an attribute name of `String`, or a customised\n *     function that takes the original `String` and returns the modified `String`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random word\n *\n * @template T\n * @param {StringIterator | Args_gen_word} pool\n * @param {string | StringFunction} [func]\n * @param {any[]} [args]\n * @returns {string}\n */\nfunction _gen_word(\n    func_args: StringIterator | Args_gen_word,\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    } else\n        var pool = func_args;\n\n    var text = pool.next().value;\n    if (func !== undefined)\n        if (typeof func === \"string\")\n            text = text[func](...args);\n        else\n            text = func(text, ...args);\n    return text;\n}\n\n/**\n * Generate random sentence.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentence\n *\n * @param {StringIterator | Args_gen_sentence} pool\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @returns {string}\n */\nfunction _gen_sentence(\n    func_args: StringIterator | Args_gen_sentence,\n    comma: NumberTuple,\n    word_range: NumberTuple\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var comma = func_args.comma;\n        var word_range = func_args.word_range;\n    } else\n        var pool = func_args;\n\n    var text = _gen_word(pool, 'capitalize');\n    for (var i = 0; i < random.randint(...word_range) - 1; i++)\n        text += ' ' + _gen_word(pool);\n\n    var include_comma: boolean;\n    for (var i = 0; i < random.randint(...comma); i++) {\n        include_comma = random.choice([true, false]);\n        if (include_comma) {\n            text += ','\n            for (var i = 0; i < random.randint(...word_range) - 1; i++)\n                text += ' ' + _gen_word(pool);\n            continue\n        }\n        break\n    }\n    return text + '.';\n}\n\n/**\n * Generate random paragraph.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 1])`\n *\n * - Returns:\n *\n *   * `str` -- random paragraph\n *\n * @param {(StringIterator | Args_gen_paragraph)} func_args\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @param {NumberTuple} sentence_range\n * @returns {string}\n */\nfunction _gen_paragraph(\n    func_args: StringIterator | Args_gen_paragraph,\n    comma: NumberTuple,\n    word_range: NumberTuple,\n    sentence_range: NumberTuple\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var comma = func_args.comma;\n        var word_range = func_args.word_range;\n        var sentence_range = func_args.sentence_range;\n    } else\n        var pool = func_args;\n\n    var text = _gen_sentence(pool, comma, word_range);\n    for (var i = 0; i < random.randint(...sentence_range) - 1; i++)\n        text += ' ' + _gen_sentence(pool, comma, word_range);\n    return text;\n}\n\n/**\n * Generate a list of random words.\n *\n * ```javascript\n * > word(3)\n * InfiniteIterator {\n *   items: [ 'dolore', 'esse', 'duis' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, 'capitalize')\n * InfiniteIterator {\n *   items: [ 'Ullamco', 'Adipiscing', 'Consectetur' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, (s) => s.toUpperCase())\n * InfiniteIterator {\n *   items: [ 'QUIS', 'ALIQUA', 'CILLUM' ],\n *   pointer: 0,\n *   length: 3\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random words.\n *\n *     *default*: `1`\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be an attribute name of `string`, or a customised\n *     function that takes the original `string` and returns the modified `string`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional positional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random words generator\n *\n * @export\n * @param {(number | Args_word)} [func_args=1]\n * @param {(string | StringFunction)} [func]\n * @param {any[]} [args=[]]\n * @returns {StringIterator}\n */\nexport function word(\n    func_args: number | Args_word = 1,\n    func?: string | StringFunction,\n    args: any[] = []\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_word(pool, func, args));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random sentences.\n *\n * ```javascript\n * > sentence()\n * InfiniteIterator {\n *   items: [ 'Anim quis id et adipiscing nulla.' ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random sentences.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random sentence generator\n *\n * @export\n * @param {(number | Args_sentence)} [func_args=1]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @returns {StringIterator}\n */\nexport function sentence(\n    func_args: number | Args_sentence = 1,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_sentence(pool, comma, word_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random paragraphs.\n *\n * ```javascript\n * > paragraph()\n * InfiniteIterator {\n *   items: [\n *     'Tempor minim mollit deserunt do. Eu exercitation et reprehenderit, veniam ad proident. Quis lorem cupidatat sit fugiat. Sed cillum pariatur aute irure magna ea. Commodo voluptate ullamco sint aliqua in, consequat qui officia esse duis.'\n *   ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `int`\n *\n *     Number of non-repeated random paragraphs.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- random paragraph generator\n *\n * @export\n * @param {(number | Args_paragraph)} [func_args=1]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @param {NumberTuple} [sentence_range=[5, 10]]\n * @returns {StringIterator}\n */\nexport function paragraph(\n    func_args: number | Args_paragraph = 1,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n        var sentence_range = func_args.sentence_range === undefined ? [4, 8] as NumberTuple : func_args.sentence_range;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_paragraph(pool, comma, word_range, sentence_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Return random words.\n *\n * ```javascript\n * > lorem.get_word(3)\n * 'veniam minim sit'\n * > lorem.get_word(3, ' ', 'capitalize')\n * 'In Nulla Enim'\n * > lorem.get_word(3, '-', (s) => s.toUpperCase())\n * 'OCCAECAT-DOLOR-SINT'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random words. To generate random number of words, supply a\n *     2-element tuple of `number`, the function will use `random.randint` to choose\n *     a random integer as the number of random words.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each word.\n *\n *     *default*: `' '`\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be a function name of `string`, or a customised\n *     function that takes the original `string` and returns the modified `string`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random words\n *\n * @export\n * @param {(number | NumberTuple | Args_get_word)} [func_args=1]\n * @param {string} [sep=' ']\n * @param {(string | StringFunction)} [func]\n * @param {any[]} [args=[]]\n * @returns {string}\n */\nexport function get_word(\n    func_args: number | NumberTuple | Args_get_word = 1,\n    sep: string = ' ',\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = word(count, func, args);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random sentences.\n *\n * ```javascript\n * > get_sentence()\n * 'Irure adipiscing reprehenderit cupidatat sint.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random sentences. To generate random number of sentences,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     sentences.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each sentence.\n *\n *     *default*: `' '`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentences\n *\n * @export\n * @param {(number | NumberTuple | Args_get_sentence)} [func_args=1]\n * @param {string} [sep=' ']\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @returns {string}\n */\nexport function get_sentence(\n    func_args: number | NumberTuple | Args_get_sentence = 1,\n    sep: string = ' ',\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = sentence(count, comma, word_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random paragraphs.\n *\n * ```javascript\n * > get_paragraph()\n * 'Est ut nisi consequat reprehenderit elit. Aliquip sed sint excepteur sunt. Cupidatat officia labore lorem ullamco. Minim aute proident quis laborum esse anim, in sit incididunt. Aliqua culpa dolor magna, qui ex eu laboris et. Do id ea cillum veniam. Velit exercitation dolore voluptate tempor.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random paragraphs. To generate random number of paragraphs,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     paragraphs.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each paragraph.\n *\n *     *default*: `os.EOL` (`\\r\\n` on Windows, `\\n` on POSIX)\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `string` -- random paragraphs\n *\n * @export\n * @param {(number | NumberTuple | Args_get_paragraph)} [func_args=1]\n * @param {string} [sep=EOL]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @param {NumberTuple} [sentence_range=[5, 10]]\n * @returns {string}\n */\nexport function get_paragraph(\n    func_args: number | NumberTuple | Args_get_paragraph = 1,\n    sep: string = EOL,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n        var sentence_range = func_args.sentence_range === undefined ? [5, 10] as NumberTuple : func_args.sentence_range;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = paragraph(count, comma, word_range, sentence_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Customise random word pool.\n *\n * - Args:\n *\n *   * `pool` -- `string[]`\n *\n *     List of words to be used as random word pool.\n *\n * @param {string[]} pool\n */\nexport function set_pool(pool: string[]) {\n    _TEXT = pool;\n}\n","/// <reference path=\"../ts/random.d.ts\" />\n\n/**\n * JavaScript port of some useful functions from Python's\n * builtin `random` module.\n *\n * @module random\n * @see module:lorem\n */\n\n'use strict';\n\n/**\n * Shuffle list x in place, and return None.\n *\n * @template T\n * @param {T[]} x\n */\nexport function shuffle<T>(x: T[]) {\n    var temp: any;\n\n    var j: number;\n    for (var i = x.length - 1; i > 0; i--) {\n        j = Math.floor((Math.random() * (i + 1)));\n\n        temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n}\n\n/**\n * Return random integer in range [a, b], including both end points.\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport function randint(a: number, b: number) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\n/**\n * Choose a random element from a non-empty sequence.\n *\n * @template T\n * @param {T[]} seq\n * @returns {T}\n */\nexport function choice<T>(seq: T[]) {\n    var i = Math.floor((Math.random() * seq.length));\n    return seq[i];\n}\n","/// <reference path=\"../ts/types.d.ts\" />\n\n/**\n * Customised utility types.\n *\n * @module types\n * @see module:lorem\n */\n\n'use strict';\n\nimport * as random from \"./random\";\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @param {string} s\n * @returns {string}\n */\nfunction capitalize(s: string): string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @returns {string}\n * @memberof String\n */\nString.prototype.capitalize = function (): string {\n    return capitalize(this.toString());\n};\n\n/**\n * Infinite iterator.\n *\n * @class InfiniteIterator\n * @implements {Iterator<T>}\n * @template T\n */\nexport class InfiniteIterator<T> implements Iterator<T> {\n    /**\n     * Elements to iterate.\n     *\n     * @private\n     * @type {T[]}\n     * @memberof InfiniteIterator\n     */\n    private _elements: T[];\n    /**\n     * Shuffle after each turn.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof InfiniteIterator\n     */\n    private _shuffle: boolean;\n\n    /**\n     * Length of elements.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfiniteIterator\n     */\n    private _length: number;\n    /**\n     * Iterating index pointer.\n     *\n     * @private\n     * @memberof InfiniteIterator\n     */\n    private pointer = 0;\n\n    /**\n     * Creates an instance of `InfiniteIterator`.\n     *\n     * @param {T[]} elements -- elements to iterate\n     * @param {boolean} [shuffle] -- shuffle after each turn\n     * @memberof InfiniteIterator\n     */\n    constructor(elements: T[], shuffle: boolean = false) {\n        this._length = elements.length;\n        this._elements = elements;\n        this._shuffle = shuffle;\n    }\n\n    /**\n     * Interator protocol `next`.\n     *\n     * @returns {IteratorResult<T>}\n     * @memberof InfiniteIterator\n     */\n    public next(): IteratorResult<T> {\n        if (this.pointer >= this._length) {\n            this.pointer = 0;\n            if (this._shuffle)\n                random.shuffle(this._elements);\n        }\n\n        return {\n            done: false,\n            value: this._elements[this.pointer++]\n        };\n    }\n\n    /**\n     * Iterator protocol registration.\n     *\n     * @returns {Iterator<T>}\n     * @memberof InfiniteIterator\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this;\n    }\n}\n"]}