{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/os-browserify/browser.js","ts/lorem.ts","ts/random.ts","ts/types.ts"],"names":[],"mappings":"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","file":"lorem.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","/// <reference path=\"../ts/lorem.d.ts\" />\n\n/**\n * Lorem ipsum generator.\n *\n * In publishing and graphic design, lorem ipsum is a placeholder text commonly\n * used to demonstrate the visual form of a document or a typeface without\n * relying on meaningful content.\n *\n * The `lorem` module provides a generic access to generating the lorem ipsum text\n * from its very original text:\n *\n *     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n *     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n *     veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n *     commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit\n *     esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n *     cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n *     est laborum.\n *\n * Usage of the `lorem` module is rather simple. Depending on your needs, the\n * `lorem` module provides generation of **word**s, **sentence**s, and\n * **paragraph**s.\n *\n * Get Random Words\n * ----------------\n *\n * The `lorem` module provides two different ways for getting random words.\n *\n * 1. `word` -- generate a list of random words\n *\n *    ```typescript\n *    function word<T extends string | StringFunction>(\n *        count?: number | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): InfiniteIterator<string>;\n *    function word<T extends string | StringFunction>({ count, func, args }: {\n *        count?: number | undefined;\n *        func?: (T extends string ? string : StringFunction) | undefined;\n *        args?: any[] | undefined;\n *    }): InfiniteIterator<string>;\n *    ```\n *\n * 2. `get_word` -- return random words\n *\n *    ```typescript\n *    function get_word<K extends number | NumberTuple,\n *                      T extends string | StringFunction>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        func?: (T extends string ? string : StringFunction) | undefined,\n *        args?: any[] | undefined\n *    ): string;\n *    function get_word<K extends number | [number, number], T extends string | StringFunction>({ count, sep, func, args }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        func?: (T extends string ? string : StringFunction) | undefined;\n *        args?: any[] | undefined;\n *    }): string;\n *    ```\n *\n * Get Random Sentences\n * --------------------\n *\n * The `lorem` module provides two different ways for getting random sentences.\n *\n * 1. `sentence` -- generate a list of random sentences\n *\n *    ```typescript\n *    function sentence(\n *        count?: number | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined\n *    ): InfiniteIterator<string>;\n *    function sentence({ count, comma, word_range }: {\n *        count?: number | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [number, number] | undefined;\n *    }): InfiniteIterator<string>\n *    ```\n *\n * 2. `get_sentence` -- return random sentences\n *\n *    ```typescript\n *    function get_sentence<K extends number | NumberTuple>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined\n *    ): string;\n *    function get_sentence<K extends number | [number, number]>({ count, sep, comma, word_range }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [...] | undefined;\n *    }): string;\n *    ```\n *\n * Get Random Paragraphs\n * ---------------------\n *\n * The `lorem` module provides two different ways for getting random paragraphs.\n *\n * 1. `paragraph` -- generate a list of random paragraphs\n *\n *    ```typescript\n *    function paragraph(\n *        count?: number | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined,\n *        sentence_range?: NumberTuple | undefined\n *    ): InfiniteIterator<string>;\n *    function paragraph({ count, comma, word_range, sentence_range }: {\n *        count?: number | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [number, number] | undefined;\n *        sentence_range?: [number, number] | undefined;\n *    }): InfiniteIterator<string>;\n *    ```\n *\n * 2. `get_paragraph` -- return random paragraphs\n *\n *    ```typescript\n *    function get_paragraph<K extends number | NumberTuple>(\n *        count?: (K extends number ? number : NumberTuple) | undefined,\n *        sep?: string | undefined,\n *        comma?: NumberTuple | undefined,\n *        word_range?: NumberTuple | undefined,\n *        sentence_range?: [...] | undefined\n *    ): string;\n *    function get_paragraph<K extends number | [number, number]>({ count, sep, comma, word_range, sentence_range }: {\n *        count?: (K extends number ? number : [number, number]) | undefined;\n *        sep?: string | undefined;\n *        comma?: [number, number] | undefined;\n *        word_range?: [...] | undefined;\n *        sentence_range?: [...] | undefined;\n *    }): string;\n *    ```\n *\n * Customise Word Pool\n * -------------------\n *\n * If wanted, the `lorem` module also provides an interface to customise the word\n * pool as you wish.\n *\n * 1. `set_pool` -- customise random word pool\n *\n *    ```javascript\n *    function set_pool(pool: string[]): void\n *    ```\n *\n * @module lorem\n */\n\n'use strict';\n\nimport { EOL } from 'os';\nimport * as random from './random';\nimport { InfiniteIterator } from \"./types\";\n\n/** Original lorem ipsum text pool. */\nlet _TEXT: string[] = [\n    'ad', 'adipiscing', 'aliqua', 'aliquip', 'amet', 'anim', 'aute', 'cillum', 'commodo',\n    'consectetur', 'consequat', 'culpa', 'cupidatat', 'deserunt', 'do', 'dolor', 'dolore',\n    'duis', 'ea', 'eiusmod', 'elit', 'enim', 'esse', 'est', 'et', 'eu', 'ex', 'excepteur',\n    'exercitation', 'fugiat', 'id', 'in', 'incididunt', 'ipsum', 'irure', 'labore', 'laboris',\n    'laborum', 'lorem', 'magna', 'minim', 'mollit', 'nisi', 'non', 'nostrud', 'nulla',\n    'occaecat', 'officia', 'pariatur', 'proident', 'qui', 'quis', 'reprehenderit', 'sed',\n    'sint', 'sit', 'sunt', 'tempor', 'ullamco', 'ut', 'velit', 'veniam', 'voluptate'\n]\n\n/**\n * Generate word pool.\n *\n * - Args:\n *\n *   * `dupe` -- `number`\n *\n *     Duplication to generate the word pool.\n *\n *     *default*: `1`\n *\n * - Returns\n *\n *   * `StringIterator` -- an infinite loop word pool\n *\n * @param {number} [dupe=1]\n * @returns {StringIterator}\n */\nfunction _gen_pool(dupe: number = 1): StringIterator {\n    var pool: string[] = [];\n\n    for (var i = 0; i < dupe; i++) {\n        pool.push(..._TEXT);\n    }\n    random.shuffle(pool);\n\n    return new InfiniteIterator(pool, true);\n}\n\n/**\n * Generate random word.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be an attribute name of `String`, or a customised\n *     function that takes the original `String` and returns the modified `String`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random word\n *\n * @template T\n * @param {StringIterator | Args_gen_word} pool\n * @param {string | StringFunction} [func]\n * @param {any[]} [args]\n * @returns {string}\n */\nfunction _gen_word(\n    func_args: StringIterator | Args_gen_word,\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    } else\n        var pool = func_args;\n\n    var text = pool.next().value;\n    if (func !== undefined)\n        if (typeof func === \"string\")\n            text = text[func](...args);\n        else\n            text = func(text, ...args);\n    return text;\n}\n\n/**\n * Generate random sentence.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentence\n *\n * @param {StringIterator | Args_gen_sentence} pool\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @returns {string}\n */\nfunction _gen_sentence(\n    func_args: StringIterator | Args_gen_sentence,\n    comma: NumberTuple,\n    word_range: NumberTuple\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var comma = func_args.comma;\n        var word_range = func_args.word_range;\n    } else\n        var pool = func_args;\n\n    var text = _gen_word(pool, 'capitalize');\n    for (var i = 0; i < random.randint(...word_range) - 1; i++)\n        text += ' ' + _gen_word(pool);\n\n    var include_comma: boolean;\n    for (var i = 0; i < random.randint(...comma); i++) {\n        include_comma = random.choice([true, false]);\n        if (include_comma) {\n            text += ','\n            for (var i = 0; i < random.randint(...word_range) - 1; i++)\n                text += ' ' + _gen_word(pool);\n            continue\n        }\n        break\n    }\n    return text + '.';\n}\n\n/**\n * Generate random paragraph.\n *\n * - Args:\n *\n *   * `pool` -- `StringIterator`\n *\n *     Word pool, returned by `_gen_pool`.\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 1])`\n *\n * - Returns:\n *\n *   * `str` -- random paragraph\n *\n * @param {(StringIterator | Args_gen_paragraph)} func_args\n * @param {NumberTuple} comma\n * @param {NumberTuple} word_range\n * @param {NumberTuple} sentence_range\n * @returns {string}\n */\nfunction _gen_paragraph(\n    func_args: StringIterator | Args_gen_paragraph,\n    comma: NumberTuple,\n    word_range: NumberTuple,\n    sentence_range: NumberTuple\n): string {\n    if ('pool' in func_args) {\n        var pool = func_args.pool;\n        var comma = func_args.comma;\n        var word_range = func_args.word_range;\n        var sentence_range = func_args.sentence_range;\n    } else\n        var pool = func_args;\n\n    var text = _gen_sentence(pool, comma, word_range);\n    for (var i = 0; i < random.randint(...sentence_range) - 1; i++)\n        text += ' ' + _gen_sentence(pool, comma, word_range);\n    return text;\n}\n\n/**\n * Generate a list of random words.\n *\n * ```javascript\n * > word(3)\n * InfiniteIterator {\n *   items: [ 'dolore', 'esse', 'duis' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, 'capitalize')\n * InfiniteIterator {\n *   items: [ 'Ullamco', 'Adipiscing', 'Consectetur' ],\n *   pointer: 0,\n *   length: 3\n * }\n * > word(3, (s) => s.toUpperCase())\n * InfiniteIterator {\n *   items: [ 'QUIS', 'ALIQUA', 'CILLUM' ],\n *   pointer: 0,\n *   length: 3\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random words.\n *\n *     *default*: `1`\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be an attribute name of `string`, or a customised\n *     function that takes the original `string` and returns the modified `string`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional positional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random words generator\n *\n * @export\n * @param {(number | Args_word)} [func_args=1]\n * @param {(string | StringFunction)} [func]\n * @param {any[]} [args=[]]\n * @returns {StringIterator}\n */\nexport function word(\n    func_args: number | Args_word = 1,\n    func?: string | StringFunction,\n    args: any[] = []\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_word(pool, func, args));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random sentences.\n *\n * ```javascript\n * > sentence()\n * InfiniteIterator {\n *   items: [ 'Anim quis id et adipiscing nulla.' ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number`\n *\n *     Number of non-repeated random sentences.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- indefinite random sentence generator\n *\n * @export\n * @param {(number | Args_sentence)} [func_args=1]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @returns {StringIterator}\n */\nexport function sentence(\n    func_args: number | Args_sentence = 1,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_sentence(pool, comma, word_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Generate a list of random paragraphs.\n *\n * ```javascript\n * > paragraph()\n * InfiniteIterator {\n *   items: [\n *     'Tempor minim mollit deserunt do. Eu exercitation et reprehenderit, veniam ad proident. Quis lorem cupidatat sit fugiat. Sed cillum pariatur aute irure magna ea. Commodo voluptate ullamco sint aliqua in, consequat qui officia esse duis.'\n *   ],\n *   pointer: 0,\n *   length: 1\n * }\n * ```\n *\n * - Args:\n *\n *   * `count` -- `int`\n *\n *     Number of non-repeated random paragraphs.\n *\n *     *default*: `1`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `StringIterator` -- random paragraph generator\n *\n * @export\n * @param {(number | Args_paragraph)} [func_args=1]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @param {NumberTuple} [sentence_range=[5, 10]]\n * @returns {StringIterator}\n */\nexport function paragraph(\n    func_args: number | Args_paragraph = 1,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n): StringIterator {\n    if (typeof func_args === 'number') {\n        var count = func_args;\n    } else {\n        var count = func_args.count;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n        var sentence_range = func_args.sentence_range === undefined ? [4, 8] as NumberTuple : func_args.sentence_range;\n    }\n\n    var pool = _gen_pool(count);\n    var list: string[] = [];\n\n    for (var i = 0; i < count; i++)\n        list.push(_gen_paragraph(pool, comma, word_range, sentence_range));\n    return new InfiniteIterator(list);\n}\n\n/**\n * Return random words.\n *\n * ```javascript\n * > lorem.get_word(3)\n * 'veniam minim sit'\n * > lorem.get_word(3, ' ', 'capitalize')\n * 'In Nulla Enim'\n * > lorem.get_word(3, '-', (s) => s.toUpperCase())\n * 'OCCAECAT-DOLOR-SINT'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random words. To generate random number of words, supply a\n *     2-element tuple of `number`, the function will use `random.randint` to choose\n *     a random integer as the number of random words.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each word.\n *\n *     *default*: `' '`\n *\n *   * `func` -- `string | StringFunction`\n *\n *     Filter function. It can be a function name of `string`, or a customised\n *     function that takes the original `string` and returns the modified `string`.\n *\n *     *default*: `undefined`\n *\n *   * `args` -- `any[]`\n *\n *     Additional arguments for `func`.\n *\n *     *default*: `[]`\n *\n * - Returns:\n *\n *   * `string` -- random words\n *\n * @export\n * @param {(number | NumberTuple | Args_get_word)} [func_args=1]\n * @param {string} [sep=' ']\n * @param {(string | StringFunction)} [func]\n * @param {any[]} [args=[]]\n * @returns {string}\n */\nexport function get_word(\n    func_args: number | NumberTuple | Args_get_word = 1,\n    sep: string = ' ',\n    func?: string | StringFunction,\n    args: any[] = []\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var func = func_args.func;\n        var args = func_args.args === undefined ? [] : func_args.args;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = word(count, func, args);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random sentences.\n *\n * ```javascript\n * > get_sentence()\n * 'Irure adipiscing reprehenderit cupidatat sint.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random sentences. To generate random number of sentences,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     sentences.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each sentence.\n *\n *     *default*: `' '`\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n * - Returns:\n *\n *   * `string` -- random sentences\n *\n * @export\n * @param {(number | NumberTuple | Args_get_sentence)} [func_args=1]\n * @param {string} [sep=' ']\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @returns {string}\n */\nexport function get_sentence(\n    func_args: number | NumberTuple | Args_get_sentence = 1,\n    sep: string = ' ',\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8]\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = sentence(count, comma, word_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Return random paragraphs.\n *\n * ```javascript\n * > get_paragraph()\n * 'Est ut nisi consequat reprehenderit elit. Aliquip sed sint excepteur sunt. Cupidatat officia labore lorem ullamco. Minim aute proident quis laborum esse anim, in sit incididunt. Aliqua culpa dolor magna, qui ex eu laboris et. Do id ea cillum veniam. Velit exercitation dolore voluptate tempor.'\n * ```\n *\n * - Args:\n *\n *   * `count` -- `number | NumberTuple`\n *\n *     Number of random paragraphs. To generate random number of paragraphs,\n *     supply a 2-element tuple of `number`, the function will use\n *     `random.randint` to choose a random integer as the number of random\n *     paragraphs.\n *\n *     *default*: `1`\n *\n *   * `sep` -- `string`\n *\n *     Seperator between each paragraph.\n *\n *     *default*: `os.EOL` (`\\r\\n` on Windows, `\\n` on POSIX)\n *\n *   * `comma` -- `NumberTuple`\n *\n *     Random range for number of commas. The function will use\n *     `random.randint` to choose a random integer as the number of commas.\n *\n *     *default*: `[0, 2]`\n *\n *   * `word_range` -- `NumberTuple`\n *\n *     Random range for number of words in each sentence. The function will\n *     use `random.randint` to choose a random integer as the number of words.\n *\n *     *default*: `[4, 8]`\n *\n *   * `sentence_range` -- `NumberTuple`\n *\n *     Random range for number of sentences in each paragraph. The function\n *     will use `random.randint` to choose a random integer as the number of\n *     sentences.\n *\n *     *default*: `[5, 10]`\n *\n * - Returns:\n *\n *   * `string` -- random paragraphs\n *\n * @export\n * @param {(number | NumberTuple | Args_get_paragraph)} [func_args=1]\n * @param {string} [sep=EOL]\n * @param {NumberTuple} [comma=[0, 2]]\n * @param {NumberTuple} [word_range=[4, 8]]\n * @param {NumberTuple} [sentence_range=[5, 10]]\n * @returns {string}\n */\nexport function get_paragraph(\n    func_args: number | NumberTuple | Args_get_paragraph = 1,\n    sep: string = EOL,\n    comma: NumberTuple = [0, 2],\n    word_range: NumberTuple = [4, 8],\n    sentence_range: NumberTuple = [5, 10]\n): string {\n    if (typeof func_args === 'number')\n        var count = func_args;\n    else if ('count' in func_args) {\n        var count = func_args.count === undefined ? 1 : func_args.count;\n        var sep = func_args.sep === undefined ? ' ' : func_args.sep;\n        var comma = func_args.comma === undefined ? [0, 2] as NumberTuple : func_args.comma;\n        var word_range = func_args.word_range === undefined ? [4, 8] as NumberTuple : func_args.word_range;\n        var sentence_range = func_args.sentence_range === undefined ? [5, 10] as NumberTuple : func_args.sentence_range;\n    } else\n        var count = random.randint(...func_args as NumberTuple);\n    var iter_list = paragraph(count, comma, word_range, sentence_range);\n\n    var list: string[] = [];\n    for (var i = 0; i < count; i++)\n        list.push(iter_list.next().value);\n    return list.join(sep);\n}\n\n/**\n * Customise random word pool.\n *\n * - Args:\n *\n *   * `pool` -- `string[]`\n *\n *     List of words to be used as random word pool.\n *\n * @param {string[]} pool\n */\nexport function set_pool(pool: string[]) {\n    _TEXT = pool;\n}\n","/// <reference path=\"../ts/random.d.ts\" />\n\n/**\n * JavaScript port of some useful functions from Python's\n * builtin `random` module.\n *\n * @module random\n * @see module:lorem\n */\n\n'use strict';\n\n/**\n * Shuffle list x in place, and return None.\n *\n * @template T\n * @param {T[]} x\n */\nexport function shuffle<T>(x: T[]) {\n    var temp: any;\n\n    var j: number;\n    for (var i = x.length - 1; i > 0; i--) {\n        j = Math.floor((Math.random() * (i + 1)));\n\n        temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n}\n\n/**\n * Return random integer in range [a, b], including both end points.\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport function randint(a: number, b: number) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\n/**\n * Choose a random element from a non-empty sequence.\n *\n * @template T\n * @param {T[]} seq\n * @returns {T}\n */\nexport function choice<T>(seq: T[]) {\n    var i = Math.floor((Math.random() * seq.length));\n    return seq[i];\n}\n","/// <reference path=\"../ts/types.d.ts\" />\n\n/**\n * Customised utility types.\n *\n * @module types\n * @see module:lorem\n */\n\n'use strict';\n\nimport * as random from \"./random\";\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @param {string} s\n * @returns {string}\n */\nfunction capitalize(s: string): string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/**\n * Return a capitalized version of the string.\n *\n * More specifically, make the first character have upper case and the rest lower\n * case.\n *\n * @returns {string}\n * @memberof String\n */\nString.prototype.capitalize = function (): string {\n    return capitalize(this.toString());\n};\n\n/**\n * Infinite iterator.\n *\n * @class InfiniteIterator\n * @implements {Iterator<T>}\n * @template T\n */\nexport class InfiniteIterator<T> implements Iterator<T> {\n    /**\n     * Elements to iterate.\n     *\n     * @private\n     * @type {T[]}\n     * @memberof InfiniteIterator\n     */\n    private _elements: T[];\n    /**\n     * Shuffle after each turn.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof InfiniteIterator\n     */\n    private _shuffle: boolean;\n\n    /**\n     * Length of elements.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfiniteIterator\n     */\n    private _length: number;\n    /**\n     * Iterating index pointer.\n     *\n     * @private\n     * @memberof InfiniteIterator\n     */\n    private pointer = 0;\n\n    /**\n     * Creates an instance of `InfiniteIterator`.\n     *\n     * @param {T[]} elements -- elements to iterate\n     * @param {boolean} [shuffle] -- shuffle after each turn\n     * @memberof InfiniteIterator\n     */\n    constructor(elements: T[], shuffle: boolean = false) {\n        this._length = elements.length;\n        this._elements = elements;\n        this._shuffle = shuffle;\n    }\n\n    /**\n     * Interator protocol `next`.\n     *\n     * @returns {IteratorResult<T>}\n     * @memberof InfiniteIterator\n     */\n    public next(): IteratorResult<T> {\n        if (this.pointer >= this._length) {\n            this.pointer = 0;\n            if (this._shuffle)\n                random.shuffle(this._elements);\n        }\n\n        return {\n            done: false,\n            value: this._elements[this.pointer++]\n        };\n    }\n\n    /**\n     * Iterator protocol registration.\n     *\n     * @returns {Iterator<T>}\n     * @memberof InfiniteIterator\n     */\n    [Symbol.iterator](): Iterator<T> {\n        return this;\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzIiwidHMvbG9yZW0udHMiLCJ0cy9yYW5kb20udHMiLCJ0cy90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMEdBLFlBQVksQ0FBQzs7Ozs7Ozs7O0FBRWIseUJBQXlCO0FBQ3pCLGlDQUFtQztBQUNuQyxpQ0FBMkM7QUFHM0MsSUFBSSxLQUFLLEdBQWE7SUFDbEIsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTO0lBQ3BGLGFBQWEsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRO0lBQ3JGLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxXQUFXO0lBQ3JGLGNBQWMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUztJQUN6RixTQUFTLEVBQUUs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TyxHQUFHLENBQUMsQ0FBQztZQUNqQixJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUNiLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTztZQUNILElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3hDLENBQUM7SUFDTixDQUFDO0lBUUQsMkJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQjtRQUNJLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTCx1QkFBQztBQUFELENBM0VBLEFBMkVDLElBQUE7QUEzRVksNENBQWdCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0cy5lbmRpYW5uZXNzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0xFJyB9O1xuXG5leHBvcnRzLmhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5ob3N0bmFtZVxuICAgIH1cbiAgICBlbHNlIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubG9hZGF2ZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudXB0aW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gMCB9O1xuXG5leHBvcnRzLmZyZWVtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLnRvdGFsbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy5jcHVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0Jyb3dzZXInIH07XG5cbmV4cG9ydHMucmVsZWFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLm5ldHdvcmtJbnRlcmZhY2VzXG49IGV4cG9ydHMuZ2V0TmV0d29ya0ludGVyZmFjZXNcbj0gZnVuY3Rpb24gKCkgeyByZXR1cm4ge30gfTtcblxuZXhwb3J0cy5hcmNoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2phdmFzY3JpcHQnIH07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnYnJvd3NlcicgfTtcblxuZXhwb3J0cy50bXBkaXIgPSBleHBvcnRzLnRtcERpciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJy90bXAnO1xufTtcblxuZXhwb3J0cy5FT0wgPSAnXFxuJztcblxuZXhwb3J0cy5ob21lZGlyID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gJy8nXG59O1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3RzL2xvcmVtLmQudHNcIiAvPlxuXG4vKipcbiAqIExvcmVtIGlwc3VtIGdlbmVyYXRvci5cbiAqXG4gKiBJbiBwdWJsaXNoaW5nIGFuZCBncmFwaGljIGRlc2lnbiwgbG9yZW0gaXBzdW0gaXMgYSBwbGFjZWhvbGRlciB0ZXh0IGNvbW1vbmx5XG4gKiB1c2VkIHRvIGRlbW9uc3RyYXRlIHRoZSB2aXN1YWwgZm9ybSBvZiBhIGRvY3VtZW50IG9yIGEgdHlwZWZhY2Ugd2l0aG91dFxuICogcmVseWluZyBvbiBtZWFuaW5nZnVsIGNvbnRlbnQuXG4gKlxuICogVGhlIGBsb3JlbWAgbW9kdWxlIHByb3ZpZGVzIGEgZ2VuZXJpYyBhY2Nlc3MgdG8gZ2VuZXJhdGluZyB0aGUgbG9yZW0gaXBzdW0gdGV4dFxuICogZnJvbSBpdHMgdmVyeSBvcmlnaW5hbCB0ZXh0OlxuICpcbiAqICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZFxuICogICAgIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltXG4gKiAgICAgdmVuaWFtLCBxdWlzIG5vc3RydWQgZXhlcmNpdGF0aW9uIHVsbGFtY28gbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWFcbiAqICAgICBjb21tb2RvIGNvbnNlcXVhdC4gRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0XG4gKiAgICAgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXRcbiAqICAgICBjdXBpZGF0YXQgbm9uIHByb2lkZW50LCBzdW50IGluIGN1bHBhIHF1aSBvZmZpY2lhIGRlc2VydW50IG1vbGxpdCBhbmltIGlkXG4gKiAgICAgZXN0IGxhYm9ydW0uXG4gKlxuICogVXNhZ2Ugb2YgdGhlIGBsb3JlbWAgbW9kdWxlIGlzIHJhdGhlciBzaW1wbGUuIERlcGVuZGluZyBvbiB5b3VyIG5lZWRzLCB0aGVcbiAqIGBsb3JlbWAgbW9kdWxlIHByb3ZpZGVzIGdlbmVyYXRpb24gb2YgKip3b3JkKipzLCAqKnNlbnRlbmNlKipzLCBhbmRcbiAqICoqcGFyYWdyYXBoKipzLlxuICpcbiAqIEdldCBSYW5kb20gV29yZHNcbiAqIC0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBUaGUgYGxvcmVtYCBtb2R1bGUgcHJvdmlkZXMgdHdvIGRpZmZlcmVudCB3YXlzIGZvciBnZXR0aW5nIHJhbmRvbSB3b3Jkcy5cbiAqXG4gKiAxLiBgd29yZGAgLS0gZ2VuZXJhdGUgYSBsaXN0IG9mIHJhbmRvbSB3b3Jkc1xuICpcbiAqICAgIGBgYHR5cGVzY3JpcHRcbiAqICAgIGZ1bmN0aW9uIHdvcmQ8VCBleHRlbmRzIHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uPihcbiAqICAgICAgICBjb3VudD86IG51bWJlciB8IHVuZGVmaW5lZCxcbiAqICAgICAgICBmdW5jPzogKFQgZXh0ZW5kcyBzdHJpbmcgPyBzdHJpbmcgOiBTdHJpbmdGdW5jdGlvbikgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgYXJncz86IGFueVtdIHwgdW5kZWZpbmVkXG4gKiAgICApOiBJbmZpbml0ZUl0ZXJhdG9yPHN0cmluZz47XG4gKiAgICBmdW5jdGlvbiB3b3JkPFQgZXh0ZW5kcyBzdHJpbmcgfCBTdHJpbmdGdW5jdGlvbj4oeyBjb3VudCwgZnVuYywgYXJncyB9OiB7XG4gKiAgICAgICAgY291bnQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gKiAgICAgICAgZnVuYz86IChUIGV4dGVuZHMgc3RyaW5nID8gc3RyaW5nIDogU3RyaW5nRnVuY3Rpb24pIHwgdW5kZWZpbmVkO1xuICogICAgICAgIGFyZ3M/OiBhbnlbXSB8IHVuZGVmaW5lZDtcbiAqICAgIH0pOiBJbmZpbml0ZUl0ZXJhdG9yPHN0cmluZz47XG4gKiAgICBgYGBcbiAqXG4gKiAyLiBgZ2V0X3dvcmRgIC0tIHJldHVybiByYW5kb20gd29yZHNcbiAqXG4gKiAgICBgYGB0eXBlc2NyaXB0XG4gKiAgICBmdW5jdGlvbiBnZXRfd29yZDxLIGV4dGVuZHMgbnVtYmVyIHwgTnVtYmVyVHVwbGUsXG4gKiAgICAgICAgICAgICAgICAgICAgICBUIGV4dGVuZHMgc3RyaW5nIHwgU3RyaW5nRnVuY3Rpb24+KFxuICogICAgICAgIGNvdW50PzogKEsgZXh0ZW5kcyBudW1iZXIgPyBudW1iZXIgOiBOdW1iZXJUdXBsZSkgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgc2VwPzogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICogICAgICAgIGZ1bmM/OiAoVCBleHRlbmRzIHN0cmluZyA/IHN0cmluZyA6IFN0cmluZ0Z1bmN0aW9uKSB8IHVuZGVmaW5lZCxcbiAqICAgICAgICBhcmdzPzogYW55W10gfCB1bmRlZmluZWRcbiAqICAgICk6IHN0cmluZztcbiAqICAgIGZ1bmN0aW9uIGdldF93b3JkPEsgZXh0ZW5kcyBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdLCBUIGV4dGVuZHMgc3RyaW5nIHwgU3RyaW5nRnVuY3Rpb24+KHsgY291bnQsIHNlcCwgZnVuYywgYXJncyB9OiB7XG4gKiAgICAgICAgY291bnQ/OiAoSyBleHRlbmRzIG51bWJlciA/IG51bWJlciA6IFtudW1iZXIsIG51bWJlcl0pIHwgdW5kZWZpbmVkO1xuICogICAgICAgIHNlcD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAqICAgICAgICBmdW5jPzogKFQgZXh0ZW5kcyBzdHJpbmcgPyBzdHJpbmcgOiBTdHJpbmdGdW5jdGlvbikgfCB1bmRlZmluZWQ7XG4gKiAgICAgICAgYXJncz86IGFueVtdIHwgdW5kZWZpbmVkO1xuICogICAgfSk6IHN0cmluZztcbiAqICAgIGBgYFxuICpcbiAqIEdldCBSYW5kb20gU2VudGVuY2VzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFRoZSBgbG9yZW1gIG1vZHVsZSBwcm92aWRlcyB0d28gZGlmZmVyZW50IHdheXMgZm9yIGdldHRpbmcgcmFuZG9tIHNlbnRlbmNlcy5cbiAqXG4gKiAxLiBgc2VudGVuY2VgIC0tIGdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gc2VudGVuY2VzXG4gKlxuICogICAgYGBgdHlwZXNjcmlwdFxuICogICAgZnVuY3Rpb24gc2VudGVuY2UoXG4gKiAgICAgICAgY291bnQ/OiBudW1iZXIgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgY29tbWE/OiBOdW1iZXJUdXBsZSB8IHVuZGVmaW5lZCxcbiAqICAgICAgICB3b3JkX3JhbmdlPzogTnVtYmVyVHVwbGUgfCB1bmRlZmluZWRcbiAqICAgICk6IEluZmluaXRlSXRlcmF0b3I8c3RyaW5nPjtcbiAqICAgIGZ1bmN0aW9uIHNlbnRlbmNlKHsgY291bnQsIGNvbW1hLCB3b3JkX3JhbmdlIH06IHtcbiAqICAgICAgICBjb3VudD86IG51bWJlciB8IHVuZGVmaW5lZDtcbiAqICAgICAgICBjb21tYT86IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gKiAgICAgICAgd29yZF9yYW5nZT86IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gKiAgICB9KTogSW5maW5pdGVJdGVyYXRvcjxzdHJpbmc+XG4gKiAgICBgYGBcbiAqXG4gKiAyLiBgZ2V0X3NlbnRlbmNlYCAtLSByZXR1cm4gcmFuZG9tIHNlbnRlbmNlc1xuICpcbiAqICAgIGBgYHR5cGVzY3JpcHRcbiAqICAgIGZ1bmN0aW9uIGdldF9zZW50ZW5jZTxLIGV4dGVuZHMgbnVtYmVyIHwgTnVtYmVyVHVwbGU+KFxuICogICAgICAgIGNvdW50PzogKEsgZXh0ZW5kcyBudW1iZXIgPyBudW1iZXIgOiBOdW1iZXJUdXBsZSkgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgc2VwPzogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICogICAgICAgIGNvbW1hPzogTnVtYmVyVHVwbGUgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgd29yZF9yYW5nZT86IE51bWJlclR1cGxlIHwgdW5kZWZpbmVkXG4gKiAgICApOiBzdHJpbmc7XG4gKiAgICBmdW5jdGlvbiBnZXRfc2VudGVuY2U8SyBleHRlbmRzIG51bWJlciB8IFtudW1iZXIsIG51bWJlcl0+KHsgY291bnQsIHNlcCwgY29tbWEsIHdvcmRfcmFuZ2UgfToge1xuICogICAgICAgIGNvdW50PzogKEsgZXh0ZW5kcyBudW1iZXIgPyBudW1iZXIgOiBbbnVtYmVyLCBudW1iZXJdKSB8IHVuZGVmaW5lZDtcbiAqICAgICAgICBzZXA/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gKiAgICAgICAgY29tbWE/OiBbbnVtYmVyLCBudW1iZXJdIHwgdW5kZWZpbmVkO1xuICogICAgICAgIHdvcmRfcmFuZ2U/OiBbLi4uXSB8IHVuZGVmaW5lZDtcbiAqICAgIH0pOiBzdHJpbmc7XG4gKiAgICBgYGBcbiAqXG4gKiBHZXQgUmFuZG9tIFBhcmFncmFwaHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIFRoZSBgbG9yZW1gIG1vZHVsZSBwcm92aWRlcyB0d28gZGlmZmVyZW50IHdheXMgZm9yIGdldHRpbmcgcmFuZG9tIHBhcmFncmFwaHMuXG4gKlxuICogMS4gYHBhcmFncmFwaGAgLS0gZ2VuZXJhdGUgYSBsaXN0IG9mIHJhbmRvbSBwYXJhZ3JhcGhzXG4gKlxuICogICAgYGBgdHlwZXNjcmlwdFxuICogICAgZnVuY3Rpb24gcGFyYWdyYXBoKFxuICogICAgICAgIGNvdW50PzogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICogICAgICAgIGNvbW1hPzogTnVtYmVyVHVwbGUgfCB1bmRlZmluZWQsXG4gKiAgICAgICAgd29yZF9yYW5nZT86IE51bWJlclR1cGxlIHwgdW5kZWZpbmVkLFxuICogICAgICAgIHNlbnRlbmNlX3JhbmdlPzogTnVtYmVyVHVwbGUgfCB1bmRlZmluZWRcbiAqICAgICk6IEluZmluaXRlSXRlcmF0b3I8c3RyaW5nPjtcbiAqICAgIGZ1bmN0aW9uIHBhcmFncmFwaCh7IGNvdW50LCBjb21tYSwgd29yZF9yYW5nZSwgc2VudGVuY2VfcmFuZ2UgfToge1xuICogICAgICAgIGNvdW50PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICogICAgICAgIGNvbW1hPzogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZDtcbiAqICAgICAgICB3b3JkX3JhbmdlPzogW251bWJlciwgbnVtYmVyXSB8IHVuZGVmaW5lZDtcbiAqICAgICAgICBzZW50ZW5jZV9yYW5nZT86IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gKiAgICB9KTogSW5maW5pdGVJdGVyYXRvcjxzdHJpbmc+O1xuICogICAgYGBgXG4gKlxuICogMi4gYGdldF9wYXJhZ3JhcGhgIC0tIHJldHVybiByYW5kb20gcGFyYWdyYXBoc1xuICpcbiAqICAgIGBgYHR5cGVzY3JpcHRcbiAqICAgIGZ1bmN0aW9uIGdldF9wYXJhZ3JhcGg8SyBleHRlbmRzIG51bWJlciB8IE51bWJlclR1cGxlPihcbiAqICAgICAgICBjb3VudD86IChLIGV4dGVuZHMgbnVtYmVyID8gbnVtYmVyIDogTnVtYmVyVHVwbGUpIHwgdW5kZWZpbmVkLFxuICogICAgICAgIHNlcD86IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAqICAgICAgICBjb21tYT86IE51bWJlclR1cGxlIHwgdW5kZWZpbmVkLFxuICogICAgICAgIHdvcmRfcmFuZ2U/OiBOdW1iZXJUdXBsZSB8IHVuZGVmaW5lZCxcbiAqICAgICAgICBzZW50ZW5jZV9yYW5nZT86IFsuLi5dIHwgdW5kZWZpbmVkXG4gKiAgICApOiBzdHJpbmc7XG4gKiAgICBmdW5jdGlvbiBnZXRfcGFyYWdyYXBoPEsgZXh0ZW5kcyBudW1iZXIgfCBbbnVtYmVyLCBudW1iZXJdPih7IGNvdW50LCBzZXAsIGNvbW1hLCB3b3JkX3JhbmdlLCBzZW50ZW5jZV9yYW5nZSB9OiB7XG4gKiAgICAgICAgY291bnQ/OiAoSyBleHRlbmRzIG51bWJlciA/IG51bWJlciA6IFtudW1iZXIsIG51bWJlcl0pIHwgdW5kZWZpbmVkO1xuICogICAgICAgIHNlcD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAqICAgICAgICBjb21tYT86IFtudW1iZXIsIG51bWJlcl0gfCB1bmRlZmluZWQ7XG4gKiAgICAgICAgd29yZF9yYW5nZT86IFsuLi5dIHwgdW5kZWZpbmVkO1xuICogICAgICAgIHNlbnRlbmNlX3JhbmdlPzogWy4uLl0gfCB1bmRlZmluZWQ7XG4gKiAgICB9KTogc3RyaW5nO1xuICogICAgYGBgXG4gKlxuICogQ3VzdG9taXNlIFdvcmQgUG9vbFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIElmIHdhbnRlZCwgdGhlIGBsb3JlbWAgbW9kdWxlIGFsc28gcHJvdmlkZXMgYW4gaW50ZXJmYWNlIHRvIGN1c3RvbWlzZSB0aGUgd29yZFxuICogcG9vbCBhcyB5b3Ugd2lzaC5cbiAqXG4gKiAxLiBgc2V0X3Bvb2xgIC0tIGN1c3RvbWlzZSByYW5kb20gd29yZCBwb29sXG4gKlxuICogICAgYGBgamF2YXNjcmlwdFxuICogICAgZnVuY3Rpb24gc2V0X3Bvb2wocG9vbDogc3RyaW5nW10pOiB2b2lkXG4gKiAgICBgYGBcbiAqXG4gKiBAbW9kdWxlIGxvcmVtXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyByYW5kb20gZnJvbSAnLi9yYW5kb20nO1xuaW1wb3J0IHsgSW5maW5pdGVJdGVyYXRvciB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKiBPcmlnaW5hbCBsb3JlbSBpcHN1bSB0ZXh0IHBvb2wuICovXG5sZXQgX1RFWFQ6IHN0cmluZ1tdID0gW1xuICAgICdhZCcsICdhZGlwaXNjaW5nJywgJ2FsaXF1YScsICdhbGlxdWlwJywgJ2FtZXQnLCAnYW5pbScsICdhdXRlJywgJ2NpbGx1bScsICdjb21tb2RvJyxcbiAgICAnY29uc2VjdGV0dXInLCAnY29uc2VxdWF0JywgJ2N1bHBhJywgJ2N1cGlkYXRhdCcsICdkZXNlcnVudCcsICdkbycsICdkb2xvcicsICdkb2xvcmUnLFxuICAgICdkdWlzJywgJ2VhJywgJ2VpdXNtb2QnLCAnZWxpdCcsICdlbmltJywgJ2Vzc2UnLCAnZXN0JywgJ2V0JywgJ2V1JywgJ2V4JywgJ2V4Y2VwdGV1cicsXG4gICAgJ2V4ZXJjaXRhdGlvbicsICdmdWdpYXQnLCAnaWQnLCAnaW4nLCAnaW5jaWRpZHVudCcsICdpcHN1bScsICdpcnVyZScsICdsYWJvcmUnLCAnbGFib3JpcycsXG4gICAgJ2xhYm9ydW0nLCAnbG9yZW0nLCAnbWFnbmEnLCAnbWluaW0nLCAnbW9sbGl0JywgJ25pc2knLCAnbm9uJywgJ25vc3RydWQnLCAnbnVsbGEnLFxuICAgICdvY2NhZWNhdCcsICdvZmZpY2lhJywgJ3BhcmlhdHVyJywgJ3Byb2lkZW50JywgJ3F1aScsICdxdWlzJywgJ3JlcHJlaGVuZGVyaXQnLCAnc2VkJyxcbiAgICAnc2ludCcsICdzaXQnLCAnc3VudCcsICd0ZW1wb3InLCAndWxsYW1jbycsICd1dCcsICd2ZWxpdCcsICd2ZW5pYW0nLCAndm9sdXB0YXRlJ1xuXVxuXG4vKipcbiAqIEdlbmVyYXRlIHdvcmQgcG9vbC5cbiAqXG4gKiAtIEFyZ3M6XG4gKlxuICogICAqIGBkdXBlYCAtLSBgbnVtYmVyYFxuICpcbiAqICAgICBEdXBsaWNhdGlvbiB0byBnZW5lcmF0ZSB0aGUgd29yZCBwb29sLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGAxYFxuICpcbiAqIC0gUmV0dXJuc1xuICpcbiAqICAgKiBgU3RyaW5nSXRlcmF0b3JgIC0tIGFuIGluZmluaXRlIGxvb3Agd29yZCBwb29sXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtkdXBlPTFdXG4gKiBAcmV0dXJucyB7U3RyaW5nSXRlcmF0b3J9XG4gKi9cbmZ1bmN0aW9uIF9nZW5fcG9vbChkdXBlOiBudW1iZXIgPSAxKTogU3RyaW5nSXRlcmF0b3Ige1xuICAgIHZhciBwb29sOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkdXBlOyBpKyspIHtcbiAgICAgICAgcG9vbC5wdXNoKC4uLl9URVhUKTtcbiAgICB9XG4gICAgcmFuZG9tLnNodWZmbGUocG9vbCk7XG5cbiAgICByZXR1cm4gbmV3IEluZmluaXRlSXRlcmF0b3IocG9vbCwgdHJ1ZSk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgcmFuZG9tIHdvcmQuXG4gKlxuICogLSBBcmdzOlxuICpcbiAqICAgKiBgcG9vbGAgLS0gYFN0cmluZ0l0ZXJhdG9yYFxuICpcbiAqICAgICBXb3JkIHBvb2wsIHJldHVybmVkIGJ5IGBfZ2VuX3Bvb2xgLlxuICpcbiAqICAgKiBgZnVuY2AgLS0gYHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uYFxuICpcbiAqICAgICBGaWx0ZXIgZnVuY3Rpb24uIEl0IGNhbiBiZSBhbiBhdHRyaWJ1dGUgbmFtZSBvZiBgU3RyaW5nYCwgb3IgYSBjdXN0b21pc2VkXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgb3JpZ2luYWwgYFN0cmluZ2AgYW5kIHJldHVybnMgdGhlIG1vZGlmaWVkIGBTdHJpbmdgLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGB1bmRlZmluZWRgXG4gKlxuICogICAqIGBhcmdzYCAtLSBgYW55W11gXG4gKlxuICogICAgIEFkZGl0aW9uYWwgYXJndW1lbnRzIGZvciBgZnVuY2AuXG4gKlxuICogICAgICpkZWZhdWx0KjogYFtdYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYHN0cmluZ2AgLS0gcmFuZG9tIHdvcmRcbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtTdHJpbmdJdGVyYXRvciB8IEFyZ3NfZ2VuX3dvcmR9IHBvb2xcbiAqIEBwYXJhbSB7c3RyaW5nIHwgU3RyaW5nRnVuY3Rpb259IFtmdW5jXVxuICogQHBhcmFtIHthbnlbXX0gW2FyZ3NdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBfZ2VuX3dvcmQoXG4gICAgZnVuY19hcmdzOiBTdHJpbmdJdGVyYXRvciB8IEFyZ3NfZ2VuX3dvcmQsXG4gICAgZnVuYz86IHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uLFxuICAgIGFyZ3M6IGFueVtdID0gW11cbik6IHN0cmluZyB7XG4gICAgaWYgKCdwb29sJyBpbiBmdW5jX2FyZ3MpIHtcbiAgICAgICAgdmFyIHBvb2wgPSBmdW5jX2FyZ3MucG9vbDtcbiAgICAgICAgdmFyIGZ1bmMgPSBmdW5jX2FyZ3MuZnVuYztcbiAgICAgICAgdmFyIGFyZ3MgPSBmdW5jX2FyZ3MuYXJncyA9PT0gdW5kZWZpbmVkID8gW10gOiBmdW5jX2FyZ3MuYXJncztcbiAgICB9IGVsc2VcbiAgICAgICAgdmFyIHBvb2wgPSBmdW5jX2FyZ3M7XG5cbiAgICB2YXIgdGV4dCA9IHBvb2wubmV4dCgpLnZhbHVlO1xuICAgIGlmIChmdW5jICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0W2Z1bmNdKC4uLmFyZ3MpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0ZXh0ID0gZnVuYyh0ZXh0LCAuLi5hcmdzKTtcbiAgICByZXR1cm4gdGV4dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSByYW5kb20gc2VudGVuY2UuXG4gKlxuICogLSBBcmdzOlxuICpcbiAqICAgKiBgcG9vbGAgLS0gYFN0cmluZ0l0ZXJhdG9yYFxuICpcbiAqICAgICBXb3JkIHBvb2wsIHJldHVybmVkIGJ5IGBfZ2VuX3Bvb2xgLlxuICpcbiAqICAgKiBgY29tbWFgIC0tIGBOdW1iZXJUdXBsZWBcbiAqXG4gKiAgICAgUmFuZG9tIHJhbmdlIGZvciBudW1iZXIgb2YgY29tbWFzLiBUaGUgZnVuY3Rpb24gd2lsbCB1c2VcbiAqICAgICBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2YgY29tbWFzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbMCwgMl1gXG4gKlxuICogICAqIGB3b3JkX3JhbmdlYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIHdvcmRzIGluIGVhY2ggc2VudGVuY2UuIFRoZSBmdW5jdGlvbiB3aWxsXG4gKiAgICAgdXNlIGByYW5kb20ucmFuZGludGAgdG8gY2hvb3NlIGEgcmFuZG9tIGludGVnZXIgYXMgdGhlIG51bWJlciBvZiB3b3Jkcy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgWzQsIDhdYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYHN0cmluZ2AgLS0gcmFuZG9tIHNlbnRlbmNlXG4gKlxuICogQHBhcmFtIHtTdHJpbmdJdGVyYXRvciB8IEFyZ3NfZ2VuX3NlbnRlbmNlfSBwb29sXG4gKiBAcGFyYW0ge051bWJlclR1cGxlfSBjb21tYVxuICogQHBhcmFtIHtOdW1iZXJUdXBsZX0gd29yZF9yYW5nZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gX2dlbl9zZW50ZW5jZShcbiAgICBmdW5jX2FyZ3M6IFN0cmluZ0l0ZXJhdG9yIHwgQXJnc19nZW5fc2VudGVuY2UsXG4gICAgY29tbWE6IE51bWJlclR1cGxlLFxuICAgIHdvcmRfcmFuZ2U6IE51bWJlclR1cGxlXG4pOiBzdHJpbmcge1xuICAgIGlmICgncG9vbCcgaW4gZnVuY19hcmdzKSB7XG4gICAgICAgIHZhciBwb29sID0gZnVuY19hcmdzLnBvb2w7XG4gICAgICAgIHZhciBjb21tYSA9IGZ1bmNfYXJncy5jb21tYTtcbiAgICAgICAgdmFyIHdvcmRfcmFuZ2UgPSBmdW5jX2FyZ3Mud29yZF9yYW5nZTtcbiAgICB9IGVsc2VcbiAgICAgICAgdmFyIHBvb2wgPSBmdW5jX2FyZ3M7XG5cbiAgICB2YXIgdGV4dCA9IF9nZW5fd29yZChwb29sLCAnY2FwaXRhbGl6ZScpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZG9tLnJhbmRpbnQoLi4ud29yZF9yYW5nZSkgLSAxOyBpKyspXG4gICAgICAgIHRleHQgKz0gJyAnICsgX2dlbl93b3JkKHBvb2wpO1xuXG4gICAgdmFyIGluY2x1ZGVfY29tbWE6IGJvb2xlYW47XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5kb20ucmFuZGludCguLi5jb21tYSk7IGkrKykge1xuICAgICAgICBpbmNsdWRlX2NvbW1hID0gcmFuZG9tLmNob2ljZShbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgICAgaWYgKGluY2x1ZGVfY29tbWEpIHtcbiAgICAgICAgICAgIHRleHQgKz0gJywnXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmRvbS5yYW5kaW50KC4uLndvcmRfcmFuZ2UpIC0gMTsgaSsrKVxuICAgICAgICAgICAgICAgIHRleHQgKz0gJyAnICsgX2dlbl93b3JkKHBvb2wpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICByZXR1cm4gdGV4dCArICcuJztcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSByYW5kb20gcGFyYWdyYXBoLlxuICpcbiAqIC0gQXJnczpcbiAqXG4gKiAgICogYHBvb2xgIC0tIGBTdHJpbmdJdGVyYXRvcmBcbiAqXG4gKiAgICAgV29yZCBwb29sLCByZXR1cm5lZCBieSBgX2dlbl9wb29sYC5cbiAqXG4gKiAgICogYGNvbW1hYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIGNvbW1hcy4gVGhlIGZ1bmN0aW9uIHdpbGwgdXNlXG4gKiAgICAgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mIGNvbW1hcy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgWzAsIDJdYFxuICpcbiAqICAgKiBgd29yZF9yYW5nZWAgLS0gYE51bWJlclR1cGxlYFxuICpcbiAqICAgICBSYW5kb20gcmFuZ2UgZm9yIG51bWJlciBvZiB3b3JkcyBpbiBlYWNoIHNlbnRlbmNlLiBUaGUgZnVuY3Rpb24gd2lsbFxuICogICAgIHVzZSBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2Ygd29yZHMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYFs0LCA4XWBcbiAqXG4gKiAgICogYHNlbnRlbmNlX3JhbmdlYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIHNlbnRlbmNlcyBpbiBlYWNoIHBhcmFncmFwaC4gVGhlIGZ1bmN0aW9uXG4gKiAgICAgd2lsbCB1c2UgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mXG4gKiAgICAgc2VudGVuY2VzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbNSwgMV0pYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYHN0cmAgLS0gcmFuZG9tIHBhcmFncmFwaFxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ0l0ZXJhdG9yIHwgQXJnc19nZW5fcGFyYWdyYXBoKX0gZnVuY19hcmdzXG4gKiBAcGFyYW0ge051bWJlclR1cGxlfSBjb21tYVxuICogQHBhcmFtIHtOdW1iZXJUdXBsZX0gd29yZF9yYW5nZVxuICogQHBhcmFtIHtOdW1iZXJUdXBsZX0gc2VudGVuY2VfcmFuZ2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIF9nZW5fcGFyYWdyYXBoKFxuICAgIGZ1bmNfYXJnczogU3RyaW5nSXRlcmF0b3IgfCBBcmdzX2dlbl9wYXJhZ3JhcGgsXG4gICAgY29tbWE6IE51bWJlclR1cGxlLFxuICAgIHdvcmRfcmFuZ2U6IE51bWJlclR1cGxlLFxuICAgIHNlbnRlbmNlX3JhbmdlOiBOdW1iZXJUdXBsZVxuKTogc3RyaW5nIHtcbiAgICBpZiAoJ3Bvb2wnIGluIGZ1bmNfYXJncykge1xuICAgICAgICB2YXIgcG9vbCA9IGZ1bmNfYXJncy5wb29sO1xuICAgICAgICB2YXIgY29tbWEgPSBmdW5jX2FyZ3MuY29tbWE7XG4gICAgICAgIHZhciB3b3JkX3JhbmdlID0gZnVuY19hcmdzLndvcmRfcmFuZ2U7XG4gICAgICAgIHZhciBzZW50ZW5jZV9yYW5nZSA9IGZ1bmNfYXJncy5zZW50ZW5jZV9yYW5nZTtcbiAgICB9IGVsc2VcbiAgICAgICAgdmFyIHBvb2wgPSBmdW5jX2FyZ3M7XG5cbiAgICB2YXIgdGV4dCA9IF9nZW5fc2VudGVuY2UocG9vbCwgY29tbWEsIHdvcmRfcmFuZ2UpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZG9tLnJhbmRpbnQoLi4uc2VudGVuY2VfcmFuZ2UpIC0gMTsgaSsrKVxuICAgICAgICB0ZXh0ICs9ICcgJyArIF9nZW5fc2VudGVuY2UocG9vbCwgY29tbWEsIHdvcmRfcmFuZ2UpO1xuICAgIHJldHVybiB0ZXh0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gd29yZHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogPiB3b3JkKDMpXG4gKiBJbmZpbml0ZUl0ZXJhdG9yIHtcbiAqICAgaXRlbXM6IFsgJ2RvbG9yZScsICdlc3NlJywgJ2R1aXMnIF0sXG4gKiAgIHBvaW50ZXI6IDAsXG4gKiAgIGxlbmd0aDogM1xuICogfVxuICogPiB3b3JkKDMsICdjYXBpdGFsaXplJylcbiAqIEluZmluaXRlSXRlcmF0b3Ige1xuICogICBpdGVtczogWyAnVWxsYW1jbycsICdBZGlwaXNjaW5nJywgJ0NvbnNlY3RldHVyJyBdLFxuICogICBwb2ludGVyOiAwLFxuICogICBsZW5ndGg6IDNcbiAqIH1cbiAqID4gd29yZCgzLCAocykgPT4gcy50b1VwcGVyQ2FzZSgpKVxuICogSW5maW5pdGVJdGVyYXRvciB7XG4gKiAgIGl0ZW1zOiBbICdRVUlTJywgJ0FMSVFVQScsICdDSUxMVU0nIF0sXG4gKiAgIHBvaW50ZXI6IDAsXG4gKiAgIGxlbmd0aDogM1xuICogfVxuICogYGBgXG4gKlxuICogLSBBcmdzOlxuICpcbiAqICAgKiBgY291bnRgIC0tIGBudW1iZXJgXG4gKlxuICogICAgIE51bWJlciBvZiBub24tcmVwZWF0ZWQgcmFuZG9tIHdvcmRzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGAxYFxuICpcbiAqICAgKiBgZnVuY2AgLS0gYHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uYFxuICpcbiAqICAgICBGaWx0ZXIgZnVuY3Rpb24uIEl0IGNhbiBiZSBhbiBhdHRyaWJ1dGUgbmFtZSBvZiBgc3RyaW5nYCwgb3IgYSBjdXN0b21pc2VkXG4gKiAgICAgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgb3JpZ2luYWwgYHN0cmluZ2AgYW5kIHJldHVybnMgdGhlIG1vZGlmaWVkIGBzdHJpbmdgLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGB1bmRlZmluZWRgXG4gKlxuICogICAqIGBhcmdzYCAtLSBgYW55W11gXG4gKlxuICogICAgIEFkZGl0aW9uYWwgcG9zaXRpb25hbCBhcmd1bWVudHMgZm9yIGBmdW5jYC5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgW11gXG4gKlxuICogLSBSZXR1cm5zOlxuICpcbiAqICAgKiBgU3RyaW5nSXRlcmF0b3JgIC0tIGluZGVmaW5pdGUgcmFuZG9tIHdvcmRzIGdlbmVyYXRvclxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7KG51bWJlciB8IEFyZ3Nfd29yZCl9IFtmdW5jX2FyZ3M9MV1cbiAqIEBwYXJhbSB7KHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uKX0gW2Z1bmNdXG4gKiBAcGFyYW0ge2FueVtdfSBbYXJncz1bXV1cbiAqIEByZXR1cm5zIHtTdHJpbmdJdGVyYXRvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdvcmQoXG4gICAgZnVuY19hcmdzOiBudW1iZXIgfCBBcmdzX3dvcmQgPSAxLFxuICAgIGZ1bmM/OiBzdHJpbmcgfCBTdHJpbmdGdW5jdGlvbixcbiAgICBhcmdzOiBhbnlbXSA9IFtdXG4pOiBTdHJpbmdJdGVyYXRvciB7XG4gICAgaWYgKHR5cGVvZiBmdW5jX2FyZ3MgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGZ1bmNfYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY291bnQgPSBmdW5jX2FyZ3MuY291bnQ7XG4gICAgICAgIHZhciBmdW5jID0gZnVuY19hcmdzLmZ1bmM7XG4gICAgICAgIHZhciBhcmdzID0gZnVuY19hcmdzLmFyZ3MgPT09IHVuZGVmaW5lZCA/IFtdIDogZnVuY19hcmdzLmFyZ3M7XG4gICAgfVxuXG4gICAgdmFyIHBvb2wgPSBfZ2VuX3Bvb2woY291bnQpO1xuICAgIHZhciBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgICBsaXN0LnB1c2goX2dlbl93b3JkKHBvb2wsIGZ1bmMsIGFyZ3MpKTtcbiAgICByZXR1cm4gbmV3IEluZmluaXRlSXRlcmF0b3IobGlzdCk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBsaXN0IG9mIHJhbmRvbSBzZW50ZW5jZXMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogPiBzZW50ZW5jZSgpXG4gKiBJbmZpbml0ZUl0ZXJhdG9yIHtcbiAqICAgaXRlbXM6IFsgJ0FuaW0gcXVpcyBpZCBldCBhZGlwaXNjaW5nIG51bGxhLicgXSxcbiAqICAgcG9pbnRlcjogMCxcbiAqICAgbGVuZ3RoOiAxXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAtIEFyZ3M6XG4gKlxuICogICAqIGBjb3VudGAgLS0gYG51bWJlcmBcbiAqXG4gKiAgICAgTnVtYmVyIG9mIG5vbi1yZXBlYXRlZCByYW5kb20gc2VudGVuY2VzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGAxYFxuICpcbiAqICAgKiBgY29tbWFgIC0tIGBOdW1iZXJUdXBsZWBcbiAqXG4gKiAgICAgUmFuZG9tIHJhbmdlIGZvciBudW1iZXIgb2YgY29tbWFzLiBUaGUgZnVuY3Rpb24gd2lsbCB1c2VcbiAqICAgICBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2YgY29tbWFzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbMCwgMl1gXG4gKlxuICogICAqIGB3b3JkX3JhbmdlYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIHdvcmRzIGluIGVhY2ggc2VudGVuY2UuIFRoZSBmdW5jdGlvbiB3aWxsXG4gKiAgICAgdXNlIGByYW5kb20ucmFuZGludGAgdG8gY2hvb3NlIGEgcmFuZG9tIGludGVnZXIgYXMgdGhlIG51bWJlciBvZiB3b3Jkcy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgWzQsIDhdYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYFN0cmluZ0l0ZXJhdG9yYCAtLSBpbmRlZmluaXRlIHJhbmRvbSBzZW50ZW5jZSBnZW5lcmF0b3JcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyhudW1iZXIgfCBBcmdzX3NlbnRlbmNlKX0gW2Z1bmNfYXJncz0xXVxuICogQHBhcmFtIHtOdW1iZXJUdXBsZX0gW2NvbW1hPVswLCAyXV1cbiAqIEBwYXJhbSB7TnVtYmVyVHVwbGV9IFt3b3JkX3JhbmdlPVs0LCA4XV1cbiAqIEByZXR1cm5zIHtTdHJpbmdJdGVyYXRvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbnRlbmNlKFxuICAgIGZ1bmNfYXJnczogbnVtYmVyIHwgQXJnc19zZW50ZW5jZSA9IDEsXG4gICAgY29tbWE6IE51bWJlclR1cGxlID0gWzAsIDJdLFxuICAgIHdvcmRfcmFuZ2U6IE51bWJlclR1cGxlID0gWzQsIDhdXG4pOiBTdHJpbmdJdGVyYXRvciB7XG4gICAgaWYgKHR5cGVvZiBmdW5jX2FyZ3MgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGZ1bmNfYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY291bnQgPSBmdW5jX2FyZ3MuY291bnQ7XG4gICAgICAgIHZhciBjb21tYSA9IGZ1bmNfYXJncy5jb21tYSA9PT0gdW5kZWZpbmVkID8gWzAsIDJdIGFzIE51bWJlclR1cGxlIDogZnVuY19hcmdzLmNvbW1hO1xuICAgICAgICB2YXIgd29yZF9yYW5nZSA9IGZ1bmNfYXJncy53b3JkX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNCwgOF0gYXMgTnVtYmVyVHVwbGUgOiBmdW5jX2FyZ3Mud29yZF9yYW5nZTtcbiAgICB9XG5cbiAgICB2YXIgcG9vbCA9IF9nZW5fcG9vbChjb3VudCk7XG4gICAgdmFyIGxpc3Q6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgIGxpc3QucHVzaChfZ2VuX3NlbnRlbmNlKHBvb2wsIGNvbW1hLCB3b3JkX3JhbmdlKSk7XG4gICAgcmV0dXJuIG5ldyBJbmZpbml0ZUl0ZXJhdG9yKGxpc3QpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiByYW5kb20gcGFyYWdyYXBocy5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiA+IHBhcmFncmFwaCgpXG4gKiBJbmZpbml0ZUl0ZXJhdG9yIHtcbiAqICAgaXRlbXM6IFtcbiAqICAgICAnVGVtcG9yIG1pbmltIG1vbGxpdCBkZXNlcnVudCBkby4gRXUgZXhlcmNpdGF0aW9uIGV0IHJlcHJlaGVuZGVyaXQsIHZlbmlhbSBhZCBwcm9pZGVudC4gUXVpcyBsb3JlbSBjdXBpZGF0YXQgc2l0IGZ1Z2lhdC4gU2VkIGNpbGx1bSBwYXJpYXR1ciBhdXRlIGlydXJlIG1hZ25hIGVhLiBDb21tb2RvIHZvbHVwdGF0ZSB1bGxhbWNvIHNpbnQgYWxpcXVhIGluLCBjb25zZXF1YXQgcXVpIG9mZmljaWEgZXNzZSBkdWlzLidcbiAqICAgXSxcbiAqICAgcG9pbnRlcjogMCxcbiAqICAgbGVuZ3RoOiAxXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAtIEFyZ3M6XG4gKlxuICogICAqIGBjb3VudGAgLS0gYGludGBcbiAqXG4gKiAgICAgTnVtYmVyIG9mIG5vbi1yZXBlYXRlZCByYW5kb20gcGFyYWdyYXBocy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgMWBcbiAqXG4gKiAgICogYGNvbW1hYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIGNvbW1hcy4gVGhlIGZ1bmN0aW9uIHdpbGwgdXNlXG4gKiAgICAgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mIGNvbW1hcy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgWzAsIDJdYFxuICpcbiAqICAgKiBgd29yZF9yYW5nZWAgLS0gYE51bWJlclR1cGxlYFxuICpcbiAqICAgICBSYW5kb20gcmFuZ2UgZm9yIG51bWJlciBvZiB3b3JkcyBpbiBlYWNoIHNlbnRlbmNlLiBUaGUgZnVuY3Rpb24gd2lsbFxuICogICAgIHVzZSBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2Ygd29yZHMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYFs0LCA4XWBcbiAqXG4gKiAgICogYHNlbnRlbmNlX3JhbmdlYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIHNlbnRlbmNlcyBpbiBlYWNoIHBhcmFncmFwaC4gVGhlIGZ1bmN0aW9uXG4gKiAgICAgd2lsbCB1c2UgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mXG4gKiAgICAgc2VudGVuY2VzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbNSwgMTBdYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYFN0cmluZ0l0ZXJhdG9yYCAtLSByYW5kb20gcGFyYWdyYXBoIGdlbmVyYXRvclxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7KG51bWJlciB8IEFyZ3NfcGFyYWdyYXBoKX0gW2Z1bmNfYXJncz0xXVxuICogQHBhcmFtIHtOdW1iZXJUdXBsZX0gW2NvbW1hPVswLCAyXV1cbiAqIEBwYXJhbSB7TnVtYmVyVHVwbGV9IFt3b3JkX3JhbmdlPVs0LCA4XV1cbiAqIEBwYXJhbSB7TnVtYmVyVHVwbGV9IFtzZW50ZW5jZV9yYW5nZT1bNSwgMTBdXVxuICogQHJldHVybnMge1N0cmluZ0l0ZXJhdG9yfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyYWdyYXBoKFxuICAgIGZ1bmNfYXJnczogbnVtYmVyIHwgQXJnc19wYXJhZ3JhcGggPSAxLFxuICAgIGNvbW1hOiBOdW1iZXJUdXBsZSA9IFswLCAyXSxcbiAgICB3b3JkX3JhbmdlOiBOdW1iZXJUdXBsZSA9IFs0LCA4XSxcbiAgICBzZW50ZW5jZV9yYW5nZTogTnVtYmVyVHVwbGUgPSBbNSwgMTBdXG4pOiBTdHJpbmdJdGVyYXRvciB7XG4gICAgaWYgKHR5cGVvZiBmdW5jX2FyZ3MgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGZ1bmNfYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY291bnQgPSBmdW5jX2FyZ3MuY291bnQ7XG4gICAgICAgIHZhciBjb21tYSA9IGZ1bmNfYXJncy5jb21tYSA9PT0gdW5kZWZpbmVkID8gWzAsIDJdIGFzIE51bWJlclR1cGxlIDogZnVuY19hcmdzLmNvbW1hO1xuICAgICAgICB2YXIgd29yZF9yYW5nZSA9IGZ1bmNfYXJncy53b3JkX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNCwgOF0gYXMgTnVtYmVyVHVwbGUgOiBmdW5jX2FyZ3Mud29yZF9yYW5nZTtcbiAgICAgICAgdmFyIHNlbnRlbmNlX3JhbmdlID0gZnVuY19hcmdzLnNlbnRlbmNlX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNCwgOF0gYXMgTnVtYmVyVHVwbGUgOiBmdW5jX2FyZ3Muc2VudGVuY2VfcmFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIHBvb2wgPSBfZ2VuX3Bvb2woY291bnQpO1xuICAgIHZhciBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKVxuICAgICAgICBsaXN0LnB1c2goX2dlbl9wYXJhZ3JhcGgocG9vbCwgY29tbWEsIHdvcmRfcmFuZ2UsIHNlbnRlbmNlX3JhbmdlKSk7XG4gICAgcmV0dXJuIG5ldyBJbmZpbml0ZUl0ZXJhdG9yKGxpc3QpO1xufVxuXG4vKipcbiAqIFJldHVybiByYW5kb20gd29yZHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogPiBsb3JlbS5nZXRfd29yZCgzKVxuICogJ3ZlbmlhbSBtaW5pbSBzaXQnXG4gKiA+IGxvcmVtLmdldF93b3JkKDMsICcgJywgJ2NhcGl0YWxpemUnKVxuICogJ0luIE51bGxhIEVuaW0nXG4gKiA+IGxvcmVtLmdldF93b3JkKDMsICctJywgKHMpID0+IHMudG9VcHBlckNhc2UoKSlcbiAqICdPQ0NBRUNBVC1ET0xPUi1TSU5UJ1xuICogYGBgXG4gKlxuICogLSBBcmdzOlxuICpcbiAqICAgKiBgY291bnRgIC0tIGBudW1iZXIgfCBOdW1iZXJUdXBsZWBcbiAqXG4gKiAgICAgTnVtYmVyIG9mIHJhbmRvbSB3b3Jkcy4gVG8gZ2VuZXJhdGUgcmFuZG9tIG51bWJlciBvZiB3b3Jkcywgc3VwcGx5IGFcbiAqICAgICAyLWVsZW1lbnQgdHVwbGUgb2YgYG51bWJlcmAsIHRoZSBmdW5jdGlvbiB3aWxsIHVzZSBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZVxuICogICAgIGEgcmFuZG9tIGludGVnZXIgYXMgdGhlIG51bWJlciBvZiByYW5kb20gd29yZHMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYDFgXG4gKlxuICogICAqIGBzZXBgIC0tIGBzdHJpbmdgXG4gKlxuICogICAgIFNlcGVyYXRvciBiZXR3ZWVuIGVhY2ggd29yZC5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgJyAnYFxuICpcbiAqICAgKiBgZnVuY2AgLS0gYHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uYFxuICpcbiAqICAgICBGaWx0ZXIgZnVuY3Rpb24uIEl0IGNhbiBiZSBhIGZ1bmN0aW9uIG5hbWUgb2YgYHN0cmluZ2AsIG9yIGEgY3VzdG9taXNlZFxuICogICAgIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIG9yaWdpbmFsIGBzdHJpbmdgIGFuZCByZXR1cm5zIHRoZSBtb2RpZmllZCBgc3RyaW5nYC5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgdW5kZWZpbmVkYFxuICpcbiAqICAgKiBgYXJnc2AgLS0gYGFueVtdYFxuICpcbiAqICAgICBBZGRpdGlvbmFsIGFyZ3VtZW50cyBmb3IgYGZ1bmNgLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbXWBcbiAqXG4gKiAtIFJldHVybnM6XG4gKlxuICogICAqIGBzdHJpbmdgIC0tIHJhbmRvbSB3b3Jkc1xuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7KG51bWJlciB8IE51bWJlclR1cGxlIHwgQXJnc19nZXRfd29yZCl9IFtmdW5jX2FyZ3M9MV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwPScgJ11cbiAqIEBwYXJhbSB7KHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uKX0gW2Z1bmNdXG4gKiBAcGFyYW0ge2FueVtdfSBbYXJncz1bXV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfd29yZChcbiAgICBmdW5jX2FyZ3M6IG51bWJlciB8IE51bWJlclR1cGxlIHwgQXJnc19nZXRfd29yZCA9IDEsXG4gICAgc2VwOiBzdHJpbmcgPSAnICcsXG4gICAgZnVuYz86IHN0cmluZyB8IFN0cmluZ0Z1bmN0aW9uLFxuICAgIGFyZ3M6IGFueVtdID0gW11cbik6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBmdW5jX2FyZ3MgPT09ICdudW1iZXInKVxuICAgICAgICB2YXIgY291bnQgPSBmdW5jX2FyZ3M7XG4gICAgZWxzZSBpZiAoJ2NvdW50JyBpbiBmdW5jX2FyZ3MpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gZnVuY19hcmdzLmNvdW50ID09PSB1bmRlZmluZWQgPyAxIDogZnVuY19hcmdzLmNvdW50O1xuICAgICAgICB2YXIgc2VwID0gZnVuY19hcmdzLnNlcCA9PT0gdW5kZWZpbmVkID8gJyAnIDogZnVuY19hcmdzLnNlcDtcbiAgICAgICAgdmFyIGZ1bmMgPSBmdW5jX2FyZ3MuZnVuYztcbiAgICAgICAgdmFyIGFyZ3MgPSBmdW5jX2FyZ3MuYXJncyA9PT0gdW5kZWZpbmVkID8gW10gOiBmdW5jX2FyZ3MuYXJncztcbiAgICB9IGVsc2VcbiAgICAgICAgdmFyIGNvdW50ID0gcmFuZG9tLnJhbmRpbnQoLi4uZnVuY19hcmdzIGFzIE51bWJlclR1cGxlKTtcbiAgICB2YXIgaXRlcl9saXN0ID0gd29yZChjb3VudCwgZnVuYywgYXJncyk7XG5cbiAgICB2YXIgbGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgIGxpc3QucHVzaChpdGVyX2xpc3QubmV4dCgpLnZhbHVlKTtcbiAgICByZXR1cm4gbGlzdC5qb2luKHNlcCk7XG59XG5cbi8qKlxuICogUmV0dXJuIHJhbmRvbSBzZW50ZW5jZXMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogPiBnZXRfc2VudGVuY2UoKVxuICogJ0lydXJlIGFkaXBpc2NpbmcgcmVwcmVoZW5kZXJpdCBjdXBpZGF0YXQgc2ludC4nXG4gKiBgYGBcbiAqXG4gKiAtIEFyZ3M6XG4gKlxuICogICAqIGBjb3VudGAgLS0gYG51bWJlciB8IE51bWJlclR1cGxlYFxuICpcbiAqICAgICBOdW1iZXIgb2YgcmFuZG9tIHNlbnRlbmNlcy4gVG8gZ2VuZXJhdGUgcmFuZG9tIG51bWJlciBvZiBzZW50ZW5jZXMsXG4gKiAgICAgc3VwcGx5IGEgMi1lbGVtZW50IHR1cGxlIG9mIGBudW1iZXJgLCB0aGUgZnVuY3Rpb24gd2lsbCB1c2VcbiAqICAgICBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2YgcmFuZG9tXG4gKiAgICAgc2VudGVuY2VzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGAxYFxuICpcbiAqICAgKiBgc2VwYCAtLSBgc3RyaW5nYFxuICpcbiAqICAgICBTZXBlcmF0b3IgYmV0d2VlbiBlYWNoIHNlbnRlbmNlLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGAnICdgXG4gKlxuICogICAqIGBjb21tYWAgLS0gYE51bWJlclR1cGxlYFxuICpcbiAqICAgICBSYW5kb20gcmFuZ2UgZm9yIG51bWJlciBvZiBjb21tYXMuIFRoZSBmdW5jdGlvbiB3aWxsIHVzZVxuICogICAgIGByYW5kb20ucmFuZGludGAgdG8gY2hvb3NlIGEgcmFuZG9tIGludGVnZXIgYXMgdGhlIG51bWJlciBvZiBjb21tYXMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYFswLCAyXWBcbiAqXG4gKiAgICogYHdvcmRfcmFuZ2VgIC0tIGBOdW1iZXJUdXBsZWBcbiAqXG4gKiAgICAgUmFuZG9tIHJhbmdlIGZvciBudW1iZXIgb2Ygd29yZHMgaW4gZWFjaCBzZW50ZW5jZS4gVGhlIGZ1bmN0aW9uIHdpbGxcbiAqICAgICB1c2UgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mIHdvcmRzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbNCwgOF1gXG4gKlxuICogLSBSZXR1cm5zOlxuICpcbiAqICAgKiBgc3RyaW5nYCAtLSByYW5kb20gc2VudGVuY2VzXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHsobnVtYmVyIHwgTnVtYmVyVHVwbGUgfCBBcmdzX2dldF9zZW50ZW5jZSl9IFtmdW5jX2FyZ3M9MV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwPScgJ11cbiAqIEBwYXJhbSB7TnVtYmVyVHVwbGV9IFtjb21tYT1bMCwgMl1dXG4gKiBAcGFyYW0ge051bWJlclR1cGxlfSBbd29yZF9yYW5nZT1bNCwgOF1dXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X3NlbnRlbmNlKFxuICAgIGZ1bmNfYXJnczogbnVtYmVyIHwgTnVtYmVyVHVwbGUgfCBBcmdzX2dldF9zZW50ZW5jZSA9IDEsXG4gICAgc2VwOiBzdHJpbmcgPSAnICcsXG4gICAgY29tbWE6IE51bWJlclR1cGxlID0gWzAsIDJdLFxuICAgIHdvcmRfcmFuZ2U6IE51bWJlclR1cGxlID0gWzQsIDhdXG4pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgZnVuY19hcmdzID09PSAnbnVtYmVyJylcbiAgICAgICAgdmFyIGNvdW50ID0gZnVuY19hcmdzO1xuICAgIGVsc2UgaWYgKCdjb3VudCcgaW4gZnVuY19hcmdzKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGZ1bmNfYXJncy5jb3VudCA9PT0gdW5kZWZpbmVkID8gMSA6IGZ1bmNfYXJncy5jb3VudDtcbiAgICAgICAgdmFyIHNlcCA9IGZ1bmNfYXJncy5zZXAgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGZ1bmNfYXJncy5zZXA7XG4gICAgICAgIHZhciBjb21tYSA9IGZ1bmNfYXJncy5jb21tYSA9PT0gdW5kZWZpbmVkID8gWzAsIDJdIGFzIE51bWJlclR1cGxlIDogZnVuY19hcmdzLmNvbW1hO1xuICAgICAgICB2YXIgd29yZF9yYW5nZSA9IGZ1bmNfYXJncy53b3JkX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNCwgOF0gYXMgTnVtYmVyVHVwbGUgOiBmdW5jX2FyZ3Mud29yZF9yYW5nZTtcbiAgICB9IGVsc2VcbiAgICAgICAgdmFyIGNvdW50ID0gcmFuZG9tLnJhbmRpbnQoLi4uZnVuY19hcmdzIGFzIE51bWJlclR1cGxlKTtcbiAgICB2YXIgaXRlcl9saXN0ID0gc2VudGVuY2UoY291bnQsIGNvbW1hLCB3b3JkX3JhbmdlKTtcblxuICAgIHZhciBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICAgICAgbGlzdC5wdXNoKGl0ZXJfbGlzdC5uZXh0KCkudmFsdWUpO1xuICAgIHJldHVybiBsaXN0LmpvaW4oc2VwKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gcmFuZG9tIHBhcmFncmFwaHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogPiBnZXRfcGFyYWdyYXBoKClcbiAqICdFc3QgdXQgbmlzaSBjb25zZXF1YXQgcmVwcmVoZW5kZXJpdCBlbGl0LiBBbGlxdWlwIHNlZCBzaW50IGV4Y2VwdGV1ciBzdW50LiBDdXBpZGF0YXQgb2ZmaWNpYSBsYWJvcmUgbG9yZW0gdWxsYW1jby4gTWluaW0gYXV0ZSBwcm9pZGVudCBxdWlzIGxhYm9ydW0gZXNzZSBhbmltLCBpbiBzaXQgaW5jaWRpZHVudC4gQWxpcXVhIGN1bHBhIGRvbG9yIG1hZ25hLCBxdWkgZXggZXUgbGFib3JpcyBldC4gRG8gaWQgZWEgY2lsbHVtIHZlbmlhbS4gVmVsaXQgZXhlcmNpdGF0aW9uIGRvbG9yZSB2b2x1cHRhdGUgdGVtcG9yLidcbiAqIGBgYFxuICpcbiAqIC0gQXJnczpcbiAqXG4gKiAgICogYGNvdW50YCAtLSBgbnVtYmVyIHwgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIE51bWJlciBvZiByYW5kb20gcGFyYWdyYXBocy4gVG8gZ2VuZXJhdGUgcmFuZG9tIG51bWJlciBvZiBwYXJhZ3JhcGhzLFxuICogICAgIHN1cHBseSBhIDItZWxlbWVudCB0dXBsZSBvZiBgbnVtYmVyYCwgdGhlIGZ1bmN0aW9uIHdpbGwgdXNlXG4gKiAgICAgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mIHJhbmRvbVxuICogICAgIHBhcmFncmFwaHMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYDFgXG4gKlxuICogICAqIGBzZXBgIC0tIGBzdHJpbmdgXG4gKlxuICogICAgIFNlcGVyYXRvciBiZXR3ZWVuIGVhY2ggcGFyYWdyYXBoLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBvcy5FT0xgIChgXFxyXFxuYCBvbiBXaW5kb3dzLCBgXFxuYCBvbiBQT1NJWClcbiAqXG4gKiAgICogYGNvbW1hYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIGNvbW1hcy4gVGhlIGZ1bmN0aW9uIHdpbGwgdXNlXG4gKiAgICAgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mIGNvbW1hcy5cbiAqXG4gKiAgICAgKmRlZmF1bHQqOiBgWzAsIDJdYFxuICpcbiAqICAgKiBgd29yZF9yYW5nZWAgLS0gYE51bWJlclR1cGxlYFxuICpcbiAqICAgICBSYW5kb20gcmFuZ2UgZm9yIG51bWJlciBvZiB3b3JkcyBpbiBlYWNoIHNlbnRlbmNlLiBUaGUgZnVuY3Rpb24gd2lsbFxuICogICAgIHVzZSBgcmFuZG9tLnJhbmRpbnRgIHRvIGNob29zZSBhIHJhbmRvbSBpbnRlZ2VyIGFzIHRoZSBudW1iZXIgb2Ygd29yZHMuXG4gKlxuICogICAgICpkZWZhdWx0KjogYFs0LCA4XWBcbiAqXG4gKiAgICogYHNlbnRlbmNlX3JhbmdlYCAtLSBgTnVtYmVyVHVwbGVgXG4gKlxuICogICAgIFJhbmRvbSByYW5nZSBmb3IgbnVtYmVyIG9mIHNlbnRlbmNlcyBpbiBlYWNoIHBhcmFncmFwaC4gVGhlIGZ1bmN0aW9uXG4gKiAgICAgd2lsbCB1c2UgYHJhbmRvbS5yYW5kaW50YCB0byBjaG9vc2UgYSByYW5kb20gaW50ZWdlciBhcyB0aGUgbnVtYmVyIG9mXG4gKiAgICAgc2VudGVuY2VzLlxuICpcbiAqICAgICAqZGVmYXVsdCo6IGBbNSwgMTBdYFxuICpcbiAqIC0gUmV0dXJuczpcbiAqXG4gKiAgICogYHN0cmluZ2AgLS0gcmFuZG9tIHBhcmFncmFwaHNcbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0geyhudW1iZXIgfCBOdW1iZXJUdXBsZSB8IEFyZ3NfZ2V0X3BhcmFncmFwaCl9IFtmdW5jX2FyZ3M9MV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwPUVPTF1cbiAqIEBwYXJhbSB7TnVtYmVyVHVwbGV9IFtjb21tYT1bMCwgMl1dXG4gKiBAcGFyYW0ge051bWJlclR1cGxlfSBbd29yZF9yYW5nZT1bNCwgOF1dXG4gKiBAcGFyYW0ge051bWJlclR1cGxlfSBbc2VudGVuY2VfcmFuZ2U9WzUsIDEwXV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRfcGFyYWdyYXBoKFxuICAgIGZ1bmNfYXJnczogbnVtYmVyIHwgTnVtYmVyVHVwbGUgfCBBcmdzX2dldF9wYXJhZ3JhcGggPSAxLFxuICAgIHNlcDogc3RyaW5nID0gRU9MLFxuICAgIGNvbW1hOiBOdW1iZXJUdXBsZSA9IFswLCAyXSxcbiAgICB3b3JkX3JhbmdlOiBOdW1iZXJUdXBsZSA9IFs0LCA4XSxcbiAgICBzZW50ZW5jZV9yYW5nZTogTnVtYmVyVHVwbGUgPSBbNSwgMTBdXG4pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgZnVuY19hcmdzID09PSAnbnVtYmVyJylcbiAgICAgICAgdmFyIGNvdW50ID0gZnVuY19hcmdzO1xuICAgIGVsc2UgaWYgKCdjb3VudCcgaW4gZnVuY19hcmdzKSB7XG4gICAgICAgIHZhciBjb3VudCA9IGZ1bmNfYXJncy5jb3VudCA9PT0gdW5kZWZpbmVkID8gMSA6IGZ1bmNfYXJncy5jb3VudDtcbiAgICAgICAgdmFyIHNlcCA9IGZ1bmNfYXJncy5zZXAgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGZ1bmNfYXJncy5zZXA7XG4gICAgICAgIHZhciBjb21tYSA9IGZ1bmNfYXJncy5jb21tYSA9PT0gdW5kZWZpbmVkID8gWzAsIDJdIGFzIE51bWJlclR1cGxlIDogZnVuY19hcmdzLmNvbW1hO1xuICAgICAgICB2YXIgd29yZF9yYW5nZSA9IGZ1bmNfYXJncy53b3JkX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNCwgOF0gYXMgTnVtYmVyVHVwbGUgOiBmdW5jX2FyZ3Mud29yZF9yYW5nZTtcbiAgICAgICAgdmFyIHNlbnRlbmNlX3JhbmdlID0gZnVuY19hcmdzLnNlbnRlbmNlX3JhbmdlID09PSB1bmRlZmluZWQgPyBbNSwgMTBdIGFzIE51bWJlclR1cGxlIDogZnVuY19hcmdzLnNlbnRlbmNlX3JhbmdlO1xuICAgIH0gZWxzZVxuICAgICAgICB2YXIgY291bnQgPSByYW5kb20ucmFuZGludCguLi5mdW5jX2FyZ3MgYXMgTnVtYmVyVHVwbGUpO1xuICAgIHZhciBpdGVyX2xpc3QgPSBwYXJhZ3JhcGgoY291bnQsIGNvbW1hLCB3b3JkX3JhbmdlLCBzZW50ZW5jZV9yYW5nZSk7XG5cbiAgICB2YXIgbGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspXG4gICAgICAgIGxpc3QucHVzaChpdGVyX2xpc3QubmV4dCgpLnZhbHVlKTtcbiAgICByZXR1cm4gbGlzdC5qb2luKHNlcCk7XG59XG5cbi8qKlxuICogQ3VzdG9taXNlIHJhbmRvbSB3b3JkIHBvb2wuXG4gKlxuICogLSBBcmdzOlxuICpcbiAqICAgKiBgcG9vbGAgLS0gYHN0cmluZ1tdYFxuICpcbiAqICAgICBMaXN0IG9mIHdvcmRzIHRvIGJlIHVzZWQgYXMgcmFuZG9tIHdvcmQgcG9vbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwb29sXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfcG9vbChwb29sOiBzdHJpbmdbXSkge1xuICAgIF9URVhUID0gcG9vbDtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90cy9yYW5kb20uZC50c1wiIC8+XG5cbi8qKlxuICogSmF2YVNjcmlwdCBwb3J0IG9mIHNvbWUgdXNlZnVsIGZ1bmN0aW9ucyBmcm9tIFB5dGhvbidzXG4gKiBidWlsdGluIGByYW5kb21gIG1vZHVsZS5cbiAqXG4gKiBAbW9kdWxlIHJhbmRvbVxuICogQHNlZSBtb2R1bGU6bG9yZW1cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2h1ZmZsZSBsaXN0IHggaW4gcGxhY2UsIGFuZCByZXR1cm4gTm9uZS5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUW119IHhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGU8VD4oeDogVFtdKSB7XG4gICAgdmFyIHRlbXA6IGFueTtcblxuICAgIHZhciBqOiBudW1iZXI7XG4gICAgZm9yICh2YXIgaSA9IHgubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBqID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpKTtcblxuICAgICAgICB0ZW1wID0geFtpXTtcbiAgICAgICAgeFtpXSA9IHhbal07XG4gICAgICAgIHhbal0gPSB0ZW1wO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gcmFuZG9tIGludGVnZXIgaW4gcmFuZ2UgW2EsIGJdLCBpbmNsdWRpbmcgYm90aCBlbmQgcG9pbnRzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhXG4gKiBAcGFyYW0ge251bWJlcn0gYlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRpbnQoYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGIgLSBhKSkgKyBhO1xufVxuXG4vKipcbiAqIENob29zZSBhIHJhbmRvbSBlbGVtZW50IGZyb20gYSBub24tZW1wdHkgc2VxdWVuY2UuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VFtdfSBzZXFcbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hvaWNlPFQ+KHNlcTogVFtdKSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogc2VxLmxlbmd0aCkpO1xuICAgIHJldHVybiBzZXFbaV07XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHMvdHlwZXMuZC50c1wiIC8+XG5cbi8qKlxuICogQ3VzdG9taXNlZCB1dGlsaXR5IHR5cGVzLlxuICpcbiAqIEBtb2R1bGUgdHlwZXNcbiAqIEBzZWUgbW9kdWxlOmxvcmVtXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyByYW5kb20gZnJvbSBcIi4vcmFuZG9tXCI7XG5cbi8qKlxuICogUmV0dXJuIGEgY2FwaXRhbGl6ZWQgdmVyc2lvbiBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIE1vcmUgc3BlY2lmaWNhbGx5LCBtYWtlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaGF2ZSB1cHBlciBjYXNlIGFuZCB0aGUgcmVzdCBsb3dlclxuICogY2FzZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FwaXRhbGl6ZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcy5zbGljZSgxKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBjYXBpdGFsaXplZCB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcuXG4gKlxuICogTW9yZSBzcGVjaWZpY2FsbHksIG1ha2UgdGhlIGZpcnN0IGNoYXJhY3RlciBoYXZlIHVwcGVyIGNhc2UgYW5kIHRoZSByZXN0IGxvd2VyXG4gKiBjYXNlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiBAbWVtYmVyb2YgU3RyaW5nXG4gKi9cblN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uICgpOiBzdHJpbmcge1xuICAgIHJldHVybiBjYXBpdGFsaXplKHRoaXMudG9TdHJpbmcoKSk7XG59O1xuXG4vKipcbiAqIEluZmluaXRlIGl0ZXJhdG9yLlxuICpcbiAqIEBjbGFzcyBJbmZpbml0ZUl0ZXJhdG9yXG4gKiBAaW1wbGVtZW50cyB7SXRlcmF0b3I8VD59XG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgSW5maW5pdGVJdGVyYXRvcjxUPiBpbXBsZW1lbnRzIEl0ZXJhdG9yPFQ+IHtcbiAgICAvKipcbiAgICAgKiBFbGVtZW50cyB0byBpdGVyYXRlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7VFtdfVxuICAgICAqIEBtZW1iZXJvZiBJbmZpbml0ZUl0ZXJhdG9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBfZWxlbWVudHM6IFRbXTtcbiAgICAvKipcbiAgICAgKiBTaHVmZmxlIGFmdGVyIGVhY2ggdHVybi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIEluZmluaXRlSXRlcmF0b3JcbiAgICAgKi9cbiAgICBwcml2YXRlIF9zaHVmZmxlOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogTGVuZ3RoIG9mIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBJbmZpbml0ZUl0ZXJhdG9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBfbGVuZ3RoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSXRlcmF0aW5nIGluZGV4IHBvaW50ZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZW1iZXJvZiBJbmZpbml0ZUl0ZXJhdG9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBwb2ludGVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYEluZmluaXRlSXRlcmF0b3JgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUW119IGVsZW1lbnRzIC0tIGVsZW1lbnRzIHRvIGl0ZXJhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaHVmZmxlXSAtLSBzaHVmZmxlIGFmdGVyIGVhY2ggdHVyblxuICAgICAqIEBtZW1iZXJvZiBJbmZpbml0ZUl0ZXJhdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudHM6IFRbXSwgc2h1ZmZsZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgICAgdGhpcy5fc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW50ZXJhdG9yIHByb3RvY29sIGBuZXh0YC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtJdGVyYXRvclJlc3VsdDxUPn1cbiAgICAgKiBAbWVtYmVyb2YgSW5maW5pdGVJdGVyYXRvclxuICAgICAqL1xuICAgIHB1YmxpYyBuZXh0KCk6IEl0ZXJhdG9yUmVzdWx0PFQ+IHtcbiAgICAgICAgaWYgKHRoaXMucG9pbnRlciA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlciA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2h1ZmZsZSlcbiAgICAgICAgICAgICAgICByYW5kb20uc2h1ZmZsZSh0aGlzLl9lbGVtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5fZWxlbWVudHNbdGhpcy5wb2ludGVyKytdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0b3IgcHJvdG9jb2wgcmVnaXN0cmF0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0l0ZXJhdG9yPFQ+fVxuICAgICAqIEBtZW1iZXJvZiBJbmZpbml0ZUl0ZXJhdG9yXG4gICAgICovXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4iXX0="}